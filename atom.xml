<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>论一只菜鸟的自我修养</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.mysakure.com/"/>
  <updated>2020-01-13T07:54:00.295Z</updated>
  <id>https://blog.mysakure.com/</id>
  
  <author>
    <name>MySakure</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自己动手写printf -- 库函数printf的实现[转载]</title>
    <link href="https://blog.mysakure.com/2019/11/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99printf-%E5%BA%93%E5%87%BD%E6%95%B0printf%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://blog.mysakure.com/2019/11/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99printf-%E5%BA%93%E5%87%BD%E6%95%B0printf%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2019-11-20T14:41:33.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载来源：<a href="https://blog.csdn.net/cinmyheart/article/details/24582895">https://blog.csdn.net/cinmyheart/article/details/24582895</a></p></blockquote><a id="more"></a><p>  大概去年夏天的时候，在《C和指针》里面一个练习题要求实现一个很简单的不包含打印浮点数功能的printf函数。但是很好奇，于是一直纠结下去，结果就是知道了printf的实现，自己也写了一个简单的。或许是夏天的原因吧，那时候暑假没回去，凌晨四点兴奋到不能睡觉。那时候刚开始写blog。没想整理一下，只是简单的把最重要的实现”工具”贴了一个blog在</p><p><a href="http://blog.csdn.net/cinmyheart/article/details/9804189">http://blog.csdn.net/cinmyheart/article/details/9804189</a></p><p>那时候第一次看linux的内核代码，熬过来的感觉总是很舒坦的。。。现在可能还是有很多看不懂，但是不会去畏惧那些长段长段的宏定义函数了。。。各种高上大的skill啊。。。。</p><p>言归正传，实现printf。</p><p>其实printf和getchar()类似，它们都是一个”外壳“，真正实现功能的不是它本身，而是通过调用别的函数。</p><p>getchar() is equivalent to getc(stdin).</p><p>printf有一家子print函数</p><pre><code>printf, fprintf, sprintf, snprintf, vprintf, vfprintf, vsprintf, vsnprintf - formatted output conversion</code></pre><p>它们的声明在不同的header file里面</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">fprintf</span><span class="params">(FILE *stream, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">sprintf</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">snprintf</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">size_t</span> <span class="built_in">size</span>, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">vprintf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format, va_list ap)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">vfprintf</span><span class="params">(FILE *stream, <span class="keyword">const</span> <span class="keyword">char</span> *format, va_list ap)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">vsprintf</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">const</span> <span class="keyword">char</span> *format, va_list ap)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">vsnprintf</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">size_t</span> <span class="built_in">size</span>, <span class="keyword">const</span> <span class="keyword">char</span> *format, va_list ap)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">snprintf</span>(), vsnprintf():</span><br><span class="line">      这两个函数是C99新加的，编译的时候 注意 -<span class="built_in">std</span>=c99</span><br></pre></td></tr></table></figure><p>实现之前还是“复习”一下printf比较好，就当是铺垫</p><p>有意思的是printf的declaration。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br></pre></td></tr></table></figure><p>返回值是int，第一个参数是const字符串指针，第二个参数是个…</p><p>先看看返回值int有哪些情况</p><p>Return value<br>    Upon successful return, these functions return the number of characters printed (excluding the  null  byte  used  to  end  output  to strings).</p><p>嗯哼。。。返回的是成功打印的字符的个数，这里不包括NUL </p><p>demo:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        counter = <span class="built_in">printf</span>(<span class="string">"hello world! %d\n"</span>,<span class="number">10</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"counter is %d\n"</span>,counter);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jasonleaster@ubuntu:~$ ./a.out<br>hello world! 10<br>counter is 16</p><p>接着，第一个参数是一个指针，指向const字符串</p><p>Format of the format string<br>       The format string is a character string, beginning and ending in its initial shift state, if any.  The format string is  composed  of<br>       zero or more directives: ordinary characters (not %), which are copied unchanged to the output stream; and conversion specifications,<br>       each of which results in fetching zero or more subsequent arguments.  Each conversion specification is introduced by the character %,<br>       and  ends  with a conversion specifier.  In between there may be (in this order) zero or more flags, an optional minimum field width,<br>       an optional precision and an optional length modifier.</p><p>很少人会用下面这种用法</p><p>printf(“%*d”,10,5);</p><p>我第一次遇到的时候，可以说是“惊愕”，究竟会打印什么东西。折腾了好久，最后搞定了。总结在这里</p><p><a href="http://blog.csdn.net/cinmyheart/article/details/10116359">http://blog.csdn.net/cinmyheart/article/details/10116359</a></p><p>Format of the format string</p><p> The format string is a character string, beginning and ending in its initial shift state, if any.  The format string is  composed  of zero or more directives: ordinary characters (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments.  Each conversion specification is introduced by the character %, and  ends  with a conversion specifier.  In between there may be (in this order) zero or more flags, an optional minimum field width, an optional precision and an optional length modifier.</p><p>The arguments must correspond properly (after type promotion) with the conversion specifier.  By default, the arguments are  used  in the  order  given, where each ‘<em>‘ and each conversion specifier asks for the next argument (and it is an error if insufficiently many arguments are given).  One can also specify explicitly which argument is taken, at each place where an argument is required, by writing  “%m$”  instead  of  ‘%’  and  “*m$” instead of ‘</em>‘, where the decimal integer m denotes the position in the argument list of the<br>   desired argument, indexed starting from 1.  Thus,</p><p>​       printf(“%*d”, width, num);</p><p>   and</p><p>​       printf(“%2$*1$d”, width, num);</p><p>   are equivalent.  The second style allows repeated references to the same argument.  The C99 standard does not include the style using ‘$’,  which comes from the Single UNIX Specification.  If the style using ‘$’ is used, it must be used throughout for all conversions taking an argument and all width and precision arguments, but it may be mixed with “%%” formats which do  not  consume  an  argument.<br>   There  may  be  no  gaps in the numbers of arguments specified using ‘$’; for example, if arguments 1 and 3 are specified, argument 2<br>   must also be specified somewhere in the format string.</p><p>第三个参数  …</p><p>嗯，这家伙有点屌，叫做变长参数。把这个搞定，C总会有点长进的</p><p>  这个stdarg.h 我在现在的GCC和现在的linux 3.0版本的内核里面找了好久，都木有，估计是封装到被的地方了。。。。</p><p><strong>builtin_va_start(v,l) 线索就死在这个地方。。。之后就找不到</strong>builtin_va_start的定义了</p><p>还是看早起内核的实现吧</p><p>0.12内核里面的stdarg.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _STDARG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _STDARG_H</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> *va_list;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Amount of space required in an argument list for an arg of type TYPE.</span></span><br><span class="line"><span class="comment">   TYPE may alternatively be an expression whose type is used.  */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __va_rounded_size(TYPE)  \</span></span><br><span class="line">  (((<span class="keyword">sizeof</span> (TYPE) + <span class="keyword">sizeof</span> (<span class="keyword">int</span>) - <span class="number">1</span>) / <span class="keyword">sizeof</span> (<span class="keyword">int</span>)) * <span class="keyword">sizeof</span> (<span class="keyword">int</span>))</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __sparc__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> va_start(AP, LASTARG) \</span></span><br><span class="line"> (AP = ((<span class="keyword">char</span> *) &amp;(LASTARG) + __va_rounded_size (LASTARG)))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> va_start(AP, LASTARG) \</span></span><br><span class="line"> (__builtin_saveregs (),\</span><br><span class="line">  AP = ((<span class="keyword">char</span> *) &amp;(LASTARG) + __va_rounded_size (LASTARG)))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">va_end</span> <span class="params">(va_list)</span></span>;<span class="comment">/* Defined in gnulib */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> va_end(AP)</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> va_arg(AP, TYPE)\</span></span><br><span class="line"> (AP += __va_rounded_size (TYPE),\</span><br><span class="line">  *((TYPE *) (AP - __va_rounded_size (TYPE))))</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* _STDARG_H */</span></span></span><br></pre></td></tr></table></figure><p>va_list 是一个指向字符串的指针</p><p>分析上面的宏定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define __va_rounded_size(TYPE)  \</span><br><span class="line">  (((sizeof (TYPE) + sizeof (int) - 1) &#x2F; sizeof (int)) * sizeof (int))</span><br></pre></td></tr></table></figure><p>这个用来得到TYPE元素类型的字节大小，若不足4字节(例如short 和char),那么认为这个元素的大小为4字节，简单的说就是检测元素的大小，不足4字节的当作4字节看待。。。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> va_start(AP, LASTARG) \</span></span><br><span class="line"> (AP = ((<span class="keyword">char</span> *) &amp;(LASTARG) + __va_rounded_size (LASTARG)))</span><br></pre></td></tr></table></figure><p>AP一般都是va_list，LASTARG则是指向参数变长函数的格式化字符串的指针.</p><p>va_start的作用就很明显了。取得变长参数列表的第一个参数的地址。</p><p>va_end 则是把指针va_list 置0 (通过google知道的，这个va_end真没找到定义，代码里面就一句#define 我无能为力啊。。。)</p><p>不过知道用va_start 和va_end 就OK啦</p><p>下面先来个变长参数的demo</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************************</span></span><br><span class="line"><span class="comment">code writer : EOF</span></span><br><span class="line"><span class="comment">code date : 2014.04.26</span></span><br><span class="line"><span class="comment">e-mail:jasonleaster@gmail.com</span></span><br><span class="line"><span class="comment">code purpose:</span></span><br><span class="line"><span class="comment">        just a demo for varible parameter function.</span></span><br><span class="line"><span class="comment">        usage: va_sum(a number,anohter number...,0);</span></span><br><span class="line"><span class="comment">               va_sum(1,2,3,4,5,0); return 15</span></span><br><span class="line"><span class="comment">******************************************************************************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">va_sum</span><span class="params">(<span class="keyword">int</span>* a,...)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> foo = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        foo = va_sum(&amp;number,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">va_sum</span><span class="params">(<span class="keyword">int</span>* a,...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> element = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        va_list arg;</span><br><span class="line"> </span><br><span class="line">        va_start(arg,a);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span>((element = va_arg(arg,<span class="keyword">int</span>)) != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                counter += element;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        va_end(arg);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写这个demo的时候，稍微纠结了一下，还是留了个小陷阱，提示一下，最后foo的值不是15<br>这里要特别注意变长参数函数的第一个值，必须是个指针，就是利用这个指针和栈的FILO的性质来找到后面的元素的，这个是参数变长函数最根本的原理，利用了参数传递保存在栈里面，而且是连续的！</p><p>va_arg的作用很明显</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> va_arg(AP, TYPE)\</span></span><br><span class="line"> (AP += __va_rounded_size (TYPE),\</span><br><span class="line">  *((TYPE *) (AP - __va_rounded_size (TYPE))))</span><br></pre></td></tr></table></figure><p> 把移动AP指针并取4字节内容读取出来。。。。我的语言表达只能这样了。。。T-T,看官自行领悟了。。。</p><p>​    好吧，是时候贴出来我自己写的一个闹着玩的printf了，仅仅是好玩，实现一下很基本的功能而已，viewer有兴趣的话可以去看vsprintf.c, 看源码是个很爽的过程(如果看懂的话)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************************************************************</span></span><br><span class="line"><span class="comment">code writer : EOF</span></span><br><span class="line"><span class="comment">code date : 2014.04.26</span></span><br><span class="line"><span class="comment">e-mail : jasonleaster@gmail.com</span></span><br><span class="line"><span class="comment">copyright@jasoneleaster</span></span><br><span class="line"><span class="comment">code purpose:</span></span><br><span class="line"><span class="comment">        I love open source and I would like to help another people</span></span><br><span class="line"><span class="comment">to learn programming. This is just a demo for how to implement </span></span><br><span class="line"><span class="comment">a "printf". It's not perfect just like a little duck. But it's a </span></span><br><span class="line"><span class="comment">representation of "printf".If there is something wrong with my code</span></span><br><span class="line"><span class="comment">please touch me by e-mail. Thank you.</span></span><br><span class="line"><span class="comment">*********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* <span class="built_in">string</span>,...)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        my_printf(<span class="string">"hello world!\n"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* <span class="built_in">string</span>,...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">char</span> <span class="built_in">buffer</span>[BUFSIZ];<span class="comment">//Be tolerant with my_printf, never try to jump ovet the band of the buffer -- buffer overflow</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        va_list arg;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">char</span>* p_string = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">char</span>* p_buffer = <span class="built_in">buffer</span>;</span><br><span class="line">        <span class="keyword">char</span>* p_temp   = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> number  = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> foo     = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        va_start(arg,<span class="built_in">string</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(counter = <span class="number">0</span>,p_string = <span class="built_in">string</span>;*(p_string) != <span class="string">'\0'</span>;)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">switch</span>(*p_string)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'%'</span>:</span><br><span class="line">                                p_string++;</span><br><span class="line"> </span><br><span class="line">                                <span class="keyword">switch</span>(*p_string)</span><br><span class="line">                                &#123;</span><br><span class="line">                                        <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line"> </span><br><span class="line">                                                temp = va_arg(arg,<span class="keyword">int</span>);</span><br><span class="line"> </span><br><span class="line">                                                foo = temp;</span><br><span class="line"> </span><br><span class="line">                                                <span class="keyword">while</span>(foo)</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                        number++;</span><br><span class="line">                                                        counter++;</span><br><span class="line">                                                        foo /= <span class="number">10</span>;</span><br><span class="line">                                                &#125;</span><br><span class="line"> </span><br><span class="line">                                                foo = temp;</span><br><span class="line"> </span><br><span class="line">                                                <span class="keyword">while</span>(number)</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                        *(p_buffer+number<span class="number">-1</span>) = (foo%<span class="number">10</span>);</span><br><span class="line">                                                        foo /= <span class="number">10</span>;</span><br><span class="line">                                                        number--;</span><br><span class="line">                                                &#125;</span><br><span class="line"> </span><br><span class="line">                                                p_buffer += number;</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">                                        <span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line">                                                temp = va_arg(arg,<span class="keyword">int</span>);</span><br><span class="line">                                                *(p_buffer++) = temp;</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">                                        <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                                                p_temp = va_arg(arg,<span class="keyword">char</span>*);</span><br><span class="line"> </span><br><span class="line">                                                <span class="keyword">while</span>(p_temp != <span class="literal">NULL</span>)</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                        *(p_buffer++) = *(p_temp++);</span><br><span class="line">                                                        counter++;</span><br><span class="line">                                                &#125;</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">                                        <span class="keyword">default</span>:</span><br><span class="line">                                                <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">                                &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                                *(p_buffer++) = *(p_string++);</span><br><span class="line">                                counter++;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        va_end(arg);</span><br><span class="line"> </span><br><span class="line">        p_buffer = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">puts</span>(<span class="built_in">buffer</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真的很幼稚，建议去看vsprintf。很精彩</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载来源：&lt;a href=&quot;https://blog.csdn.net/cinmyheart/article/details/24582895&quot;&gt;https://blog.csdn.net/cinmyheart/article/details/24582895&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="变长参数" scheme="https://blog.mysakure.com/categories/%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0/"/>
    
      <category term="linux内核" scheme="https://blog.mysakure.com/categories/%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0/linux%E5%86%85%E6%A0%B8/"/>
    
      <category term="printf实现" scheme="https://blog.mysakure.com/categories/%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0/linux%E5%86%85%E6%A0%B8/printf%E5%AE%9E%E7%8E%B0/"/>
    
    
      <category term="linux内核" scheme="https://blog.mysakure.com/tags/linux%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>计算机网路习题(1)</title>
    <link href="https://blog.mysakure.com/2019/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E8%B7%AF%E4%B9%A0%E9%A2%98-1/"/>
    <id>https://blog.mysakure.com/2019/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E8%B7%AF%E4%B9%A0%E9%A2%98-1/</id>
    <published>2019-11-12T10:17:52.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<h3 id="P2"><a href="#P2" class="headerlink" title="P2:"></a>P2:</h3><p>$(N+P-1)*L/R$</p><h3 id="P3"><a href="#P3" class="headerlink" title="P3:"></a>P3:</h3><ol><li>电路交换网更适合，因为“连续运行相当长的一段时间”，电路交换网为其预留的资源可以很充分的利用。</li><li>需要。因为他们可能一起占用某个链路。而这个链路的总容量小于他们的总容量。</li></ol><a id="more"></a><h3 id="P4"><a href="#P4" class="headerlink" title="P4:"></a>P4:</h3><ol><li>$16$</li><li>$8$</li><li>能</li></ol><h3 id="P6"><a href="#P6" class="headerlink" title="P6:"></a>P6:</h3><ol><li><p>$d_{prop}=m/s$</p></li><li><p>$d_{trans}=L/R$</p></li><li><p>$m/s+L/R$</p></li><li><p>在主机$A$的网卡出口</p></li><li><p>距离主机$A$出口$s*L/r$处</p></li><li><p>此时主机$B$已经接收到第一个比特</p></li><li><p>$$<br>m/s=L/R\<br>m=L/R<em>s=120/56</em>2.5<em>10^8=5.357</em>10^8<br>$$</p></li></ol><h3 id="P8"><a href="#P8" class="headerlink" title="P8:"></a>P8:</h3><ol><li>$3Mbps/150kbps=20$</li><li>$ 10 %$</li><li>$C_{120}^{n}0.1^n0.9^{120-n}$</li></ol><h3 id="P9"><a href="#P9" class="headerlink" title="P9:"></a>P9:</h3><ol><li>$10000$</li><li>$1-\sum_{i=0}^{n}C_{M}^{i}p^i(1-p)^{M-i}$</li></ol><h3 id="P10"><a href="#P10" class="headerlink" title="P10:"></a>P10:</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;P2&quot;&gt;&lt;a href=&quot;#P2&quot; class=&quot;headerlink&quot; title=&quot;P2:&quot;&gt;&lt;/a&gt;P2:&lt;/h3&gt;&lt;p&gt;$(N+P-1)*L/R$&lt;/p&gt;
&lt;h3 id=&quot;P3&quot;&gt;&lt;a href=&quot;#P3&quot; class=&quot;headerlink&quot; title=&quot;P3:&quot;&gt;&lt;/a&gt;P3:&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;电路交换网更适合，因为“连续运行相当长的一段时间”，电路交换网为其预留的资源可以很充分的利用。&lt;/li&gt;
&lt;li&gt;需要。因为他们可能一起占用某个链路。而这个链路的总容量小于他们的总容量。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://blog.mysakure.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="https://blog.mysakure.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>xv6 shell理解</title>
    <link href="https://blog.mysakure.com/2019/11/xv6-shell%E7%90%86%E8%A7%A3/"/>
    <id>https://blog.mysakure.com/2019/11/xv6-shell%E7%90%86%E8%A7%A3/</id>
    <published>2019-11-09T02:34:45.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考：<a href="https://blog.mysakure.com/2019/11/Implement-a-Shell-by-yourself-MIT-xv6-shell/">Implement a Shell by yourself – MIT xv6 shell(转载)</a></p></blockquote><p>看了几天的xv6​的shell作业，总算看懂一点点，感觉看懂别人的代码比自己写代码还难。</p><p>由于我本身太菜了，理解可能有诸多偏差，希望各位不吝赐教。</p><a id="more"></a><p>首先发现了两个不符合我的以往观念的东西：</p><ul><li>函数和结构体可以具有相同的名称</li><li>未分配内存的指针，可以在调用解引用运算符后调用sizeof函数</li></ul><p>真是奇怪啊</p><p>讲述一下我对xv6代码的大体框架的认识：</p><p>shell的main主函数是一个不断读取指令的循环，当需要执行指令时，fork一个子进程去执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">main(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">  <span class="keyword">int</span> fd, r;</span><br><span class="line">  <span class="comment">// Read and run input commands.</span></span><br><span class="line">  <span class="keyword">while</span>(getcmd(buf, <span class="keyword">sizeof</span>(buf)) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(buf[<span class="number">0</span>] == <span class="string">'c'</span> &amp;&amp; buf[<span class="number">1</span>] == <span class="string">'d'</span> &amp;&amp; buf[<span class="number">2</span>] == <span class="string">' '</span>)&#123;</span><br><span class="line">      <span class="comment">// Clumsy but will have to do for now.</span></span><br><span class="line">      <span class="comment">// Chdir has no effect on the parent if run in the child.</span></span><br><span class="line">      buf[<span class="built_in">strlen</span>(buf)<span class="number">-1</span>] = <span class="number">0</span>;  <span class="comment">// chop \n</span></span><br><span class="line">      <span class="keyword">if</span>(chdir(buf+<span class="number">3</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"cannot cd %s\n"</span>, buf+<span class="number">3</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fork1() == <span class="number">0</span>)</span><br><span class="line">      runcmd(parsecmd(buf));</span><br><span class="line">    wait(&amp;r);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看一下几种类型的指令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// All commands have at least a type. Have looked at the type, the code</span></span><br><span class="line"><span class="comment">// typically casts the *cmd to some specific cmd type.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;          <span class="comment">//  ' ' (exec), | (pipe), '&lt;' or '&gt;' for redirection</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">execcmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;              <span class="comment">// ' '</span></span><br><span class="line">  <span class="keyword">char</span> *argv[MAXARGS];   <span class="comment">// arguments to the command to be exec-ed</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redircmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;          <span class="comment">// &lt; or &gt; </span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">cmd</span>;</span>   <span class="comment">// the command to be run (e.g., an execcmd)</span></span><br><span class="line">  <span class="keyword">char</span> *file;        <span class="comment">// the input/output file</span></span><br><span class="line">  <span class="keyword">int</span> mode;          <span class="comment">// the mode to open the file with</span></span><br><span class="line">  <span class="keyword">int</span> fd;            <span class="comment">// the file descriptor number to use for the file</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipecmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;          <span class="comment">// |</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">left</span>;</span>  <span class="comment">// left side of pipe</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">right</span>;</span> <span class="comment">// right side of pipe</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>cmd的基类是struct cmd结构体，然后派生出三个类，exec，redirc和pipe。分别对应要执行的指令，文件重定位的指令和管道指令（我也不知道这么叫对不对，但是大体意思是这样的）。基类和派生类的相互转换给我们的代码实现带来了很大的便利。</p><p>一个很重要的关键点是，exec结构体和pipe结构体里面有指向cmd结构体的指针，这就让我们可以去构建一棵进程树，然后我们可以根据这棵树去调用执行进程，事实上我们也确实是这么做的。</p><p>看主函数里面的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(fork1() == <span class="number">0</span>)</span><br><span class="line">      runcmd(parsecmd(buf));</span><br><span class="line">    wait(&amp;r);</span><br></pre></td></tr></table></figure><p>parsecmd(buf)实际上就是分析我们输入的指令，构造一棵进程树的代码。返回的是根节点，而runcmd，则是递归的去调用执行这棵树的叶子节点的进程。（事实上叶子节点是进程，而任何一个不是叶子节点的点都代表一种关系，例如输入输出关系，| ）</p><p>管道符号的实现机制是：输入输出流重定向。进程之间利用管道通信，将进程的输入流或者输出流重定向到管道，隐藏了上层的不同（进程实际并不知道它的输出指向哪里），为实现提供了便利。</p><p>文件重定向也是将进程的输入或输出流重定向到文件。</p><p>分析输入指令的大体流程貌似是这样的，首先将指令按照  | （管道）符号分隔开，构建一颗不完整的树。然后再去分析无管道符号的指令的内部结构。如果里面有文件重定向，再慢慢在树上构建出他们的输入输出关系。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>*</span></span><br><span class="line"><span class="class"><span class="title">pipecmd</span>(<span class="title">struct</span> <span class="title">cmd</span> *<span class="title">left</span>, <span class="title">struct</span> <span class="title">cmd</span> *<span class="title">right</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipecmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  cmd = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  <span class="built_in">memset</span>(cmd, <span class="number">0</span>, <span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  cmd-&gt;type = <span class="string">'|'</span>;</span><br><span class="line">  cmd-&gt;left = left;</span><br><span class="line">  cmd-&gt;right = right;</span><br><span class="line">  <span class="keyword">return</span> (struct cmd*)cmd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>*</span></span><br><span class="line"><span class="class"><span class="title">parsepipe</span>(<span class="title">char</span> **<span class="title">ps</span>, <span class="title">char</span> *<span class="title">es</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  cmd = parseexec(ps, es);</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">peek</span>(ps, es, <span class="string">"|"</span>))&#123;</span><br><span class="line">    gettoken(ps, es, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    cmd = pipecmd(cmd, parsepipe(ps, es));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>parsepipe是一个递归函数，pipecmd是链接两颗进程树。而parseexec大概就是分析没有管道符号的进程关系的函数。（里面细节太多，看得我头皮发麻，读不懂。但是我猜测大体程序结构是这样的）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>*</span></span><br><span class="line"><span class="class"><span class="title">parseexec</span>(<span class="title">char</span> **<span class="title">ps</span>, <span class="title">char</span> *<span class="title">es</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> *q, *eq;</span><br><span class="line">  <span class="keyword">int</span> tok, argc;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">execcmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">ret</span>;</span></span><br><span class="line">  </span><br><span class="line">  ret = execcmd();</span><br><span class="line">  cmd = (struct execcmd*)ret;</span><br><span class="line"></span><br><span class="line">  argc = <span class="number">0</span>;</span><br><span class="line">  ret = parseredirs(ret, ps, es);</span><br><span class="line">  <span class="keyword">while</span>(!<span class="built_in">peek</span>(ps, es, <span class="string">"|"</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>((tok=gettoken(ps, es, &amp;q, &amp;eq)) == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(tok != <span class="string">'a'</span>) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"syntax error\n"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cmd-&gt;argv[argc] = mkcopy(q, eq);</span><br><span class="line">    argc++;</span><br><span class="line">    <span class="keyword">if</span>(argc &gt;= MAXARGS) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"too many args\n"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ret = parseredirs(ret, ps, es);</span><br><span class="line">  &#125;</span><br><span class="line">  cmd-&gt;argv[argc] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>parseexe是分析里面的文件重定向并扣出里面运行参数的代码。while循环的意思大概是防止parseexec函数处理越界，因为它是不负责处理带管道符号的指令的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>*</span></span><br><span class="line"><span class="class"><span class="title">redircmd</span>(<span class="title">struct</span> <span class="title">cmd</span> *<span class="title">subcmd</span>, <span class="title">char</span> *<span class="title">file</span>, <span class="title">int</span> <span class="title">type</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">redircmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  cmd = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  <span class="built_in">memset</span>(cmd, <span class="number">0</span>, <span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  cmd-&gt;type = type;</span><br><span class="line">  cmd-&gt;cmd = subcmd;</span><br><span class="line">  cmd-&gt;file = file;</span><br><span class="line">  cmd-&gt;mode = (type == <span class="string">'&lt;'</span>) ?  O_RDONLY : O_WRONLY|O_CREAT|O_TRUNC;</span><br><span class="line">  cmd-&gt;fd = (type == <span class="string">'&lt;'</span>) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> (struct cmd*)cmd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> </span><br><span class="line">*mkcopy(<span class="keyword">char</span> *s, <span class="keyword">char</span> *es)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> n = es - s;</span><br><span class="line">  <span class="keyword">char</span> *c = <span class="built_in">malloc</span>(n+<span class="number">1</span>);</span><br><span class="line">  assert(c);</span><br><span class="line">  <span class="built_in">strncpy</span>(c, s, n);</span><br><span class="line">  c[n] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>*</span></span><br><span class="line"><span class="class"><span class="title">parseredirs</span>(<span class="title">struct</span> <span class="title">cmd</span> *<span class="title">cmd</span>, <span class="title">char</span> **<span class="title">ps</span>, <span class="title">char</span> *<span class="title">es</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> tok;</span><br><span class="line">  <span class="keyword">char</span> *q, *eq;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">peek</span>(ps, es, <span class="string">"&lt;&gt;"</span>))&#123;</span><br><span class="line">    tok = gettoken(ps, es, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(gettoken(ps, es, &amp;q, &amp;eq) != <span class="string">'a'</span>) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"missing file for redirection\n"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span>(tok)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">      cmd = redircmd(cmd, mkcopy(q, eq), <span class="string">'&lt;'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">      cmd = redircmd(cmd, mkcopy(q, eq), <span class="string">'&gt;'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数负责处理里面的文件重定向，因为里面可能存在多个重定向符号，所以采用了while循环来处理 。rideccmd是构建具体的文件进程命令。（里面细节真的好多啊）</p><p>细节看得我头皮发麻。最后附上sh.c的完整代码（大佬写完作业的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数和结构体可以具有相同的名称</span></span><br><span class="line"><span class="comment"> * 未分配内存的指针，可以在调用解引用运算符后调用sizeof函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Simplifed xv6 shell.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXARGS 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// All commands have at least a type. Have looked at the type, the code</span></span><br><span class="line"><span class="comment">// typically casts the *cmd to some specific cmd type.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;          <span class="comment">//  ' ' (exec), | (pipe), '&lt;' or '&gt;' for redirection</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">execcmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;              <span class="comment">// ' '</span></span><br><span class="line">  <span class="keyword">char</span> *argv[MAXARGS];   <span class="comment">// arguments to the command to be exec-ed</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redircmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;          <span class="comment">// &lt; or &gt; </span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">cmd</span>;</span>   <span class="comment">// the command to be run (e.g., an execcmd)</span></span><br><span class="line">  <span class="keyword">char</span> *file;        <span class="comment">// the input/output file</span></span><br><span class="line">  <span class="keyword">int</span> mode;          <span class="comment">// the mode to open the file with</span></span><br><span class="line">  <span class="keyword">int</span> fd;            <span class="comment">// the file descriptor number to use for the file</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipecmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;          <span class="comment">// |</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">left</span>;</span>  <span class="comment">// left side of pipe</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">right</span>;</span> <span class="comment">// right side of pipe</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fork1</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">// Fork but exits on failure.</span></span><br><span class="line"><span class="function">struct cmd *<span class="title">parsecmd</span><span class="params">(<span class="keyword">char</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Execute cmd.  Never returns.</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">runcmd(struct cmd *cmd)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> p[<span class="number">2</span>]; <span class="comment">// used for pipe line in shell</span></span><br><span class="line">  <span class="keyword">int</span> r;    <span class="comment">// return value</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">execcmd</span> *<span class="title">ecmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipecmd</span> *<span class="title">pcmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">redircmd</span> *<span class="title">rcmd</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(cmd == <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">switch</span>(cmd-&gt;type)&#123;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"unknown runcmd\n"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">' '</span>:</span><br><span class="line">    ecmd = (struct execcmd*)cmd;</span><br><span class="line">    <span class="keyword">if</span>(ecmd-&gt;argv[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//fprintf(stderr, "exec not implemented\n");</span></span><br><span class="line">    <span class="comment">// Your code here ...</span></span><br><span class="line">    <span class="keyword">if</span> (access(ecmd-&gt;argv[<span class="number">0</span>], S_IXUSR | S_IRUSR) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        execv(ecmd-&gt;argv[<span class="number">0</span>], ecmd-&gt;argv);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"directory changed \n"</span>);</span><br><span class="line">        <span class="keyword">if</span>(chdir(<span class="string">"/bin/"</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"change directory failed in line %d\n"</span>, __LINE__);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        execv(ecmd-&gt;argv[<span class="number">0</span>], ecmd-&gt;argv);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"execv() %s failed in line %d\n"</span>, ecmd-&gt;argv[<span class="number">0</span>], __LINE__);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">    rcmd = (struct redircmd*)cmd;</span><br><span class="line">    <span class="comment">//fprintf(stderr, "redir not implemented\n");</span></span><br><span class="line">    <span class="comment">// Your code here ...</span></span><br><span class="line">    <span class="built_in">close</span>(rcmd-&gt;fd);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">open</span>(rcmd-&gt;file, rcmd-&gt;mode) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Try to open :%s failed\n"</span>, rcmd-&gt;file);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    runcmd(rcmd-&gt;cmd);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'|'</span>:</span><br><span class="line">    pcmd = (struct pipecmd*)cmd;</span><br><span class="line">    <span class="comment">//fprintf(stderr, "pipe not implemented\n");</span></span><br><span class="line">    <span class="comment">// Your code here ...</span></span><br><span class="line">    <span class="keyword">if</span>(pipe(p) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"call syscall pipe() failed in line %d\n"</span>, __LINE__);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fork1() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">close</span>(<span class="number">1</span>);</span><br><span class="line">        dup(p[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">close</span>(p[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">close</span>(p[<span class="number">1</span>]);</span><br><span class="line">        runcmd(pcmd-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fork1() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">close</span>(<span class="number">0</span>);</span><br><span class="line">        dup(p[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">close</span>(p[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">close</span>(p[<span class="number">1</span>]);</span><br><span class="line">        runcmd(pcmd-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(p[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">close</span>(p[<span class="number">1</span>]);</span><br><span class="line">    wait();</span><br><span class="line">    wait();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;    </span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">getcmd(<span class="keyword">char</span> *buf, <span class="keyword">int</span> nbuf)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//isatty:判断文件描述词是否为终端机</span></span><br><span class="line">  <span class="comment">//fileno:取得参数指定的文件流的文件描述符 </span></span><br><span class="line">  <span class="keyword">if</span> (isatty(fileno(<span class="built_in">stdin</span>)))</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">"6.828$ "</span>);</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, nbuf);</span><br><span class="line">  fgets(buf, nbuf, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="keyword">if</span>(buf[<span class="number">0</span>] == <span class="number">0</span>) <span class="comment">// EOF</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">  <span class="keyword">int</span> fd, r;</span><br><span class="line">  <span class="comment">// Read and run input commands.</span></span><br><span class="line">  <span class="keyword">while</span>(getcmd(buf, <span class="keyword">sizeof</span>(buf)) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(buf[<span class="number">0</span>] == <span class="string">'c'</span> &amp;&amp; buf[<span class="number">1</span>] == <span class="string">'d'</span> &amp;&amp; buf[<span class="number">2</span>] == <span class="string">' '</span>)&#123;</span><br><span class="line">      <span class="comment">// Clumsy but will have to do for now.</span></span><br><span class="line">      <span class="comment">// Chdir has no effect on the parent if run in the child.</span></span><br><span class="line">      buf[<span class="built_in">strlen</span>(buf)<span class="number">-1</span>] = <span class="number">0</span>;  <span class="comment">// chop \n</span></span><br><span class="line">      <span class="keyword">if</span>(chdir(buf+<span class="number">3</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"cannot cd %s\n"</span>, buf+<span class="number">3</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fork1() == <span class="number">0</span>)</span><br><span class="line">      runcmd(parsecmd(buf));</span><br><span class="line">    wait(&amp;r);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">fork1(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> pid;</span><br><span class="line">  </span><br><span class="line">  pid = fork();</span><br><span class="line">  <span class="keyword">if</span>(pid == <span class="number">-1</span>)</span><br><span class="line">    perror(<span class="string">"fork"</span>);</span><br><span class="line">  <span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>*</span></span><br><span class="line"><span class="class"><span class="title">execcmd</span>(<span class="title">void</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">execcmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line">  cmd = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  <span class="built_in">memset</span>(cmd, <span class="number">0</span>, <span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  cmd-&gt;type = <span class="string">' '</span>;</span><br><span class="line">  <span class="keyword">return</span> (struct cmd*)cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>*</span></span><br><span class="line"><span class="class"><span class="title">redircmd</span>(<span class="title">struct</span> <span class="title">cmd</span> *<span class="title">subcmd</span>, <span class="title">char</span> *<span class="title">file</span>, <span class="title">int</span> <span class="title">type</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">redircmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  cmd = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  <span class="built_in">memset</span>(cmd, <span class="number">0</span>, <span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  cmd-&gt;type = type;</span><br><span class="line">  cmd-&gt;cmd = subcmd;</span><br><span class="line">  cmd-&gt;file = file;</span><br><span class="line">  cmd-&gt;mode = (type == <span class="string">'&lt;'</span>) ?  O_RDONLY : O_WRONLY|O_CREAT|O_TRUNC;</span><br><span class="line">  cmd-&gt;fd = (type == <span class="string">'&lt;'</span>) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> (struct cmd*)cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>*</span></span><br><span class="line"><span class="class"><span class="title">pipecmd</span>(<span class="title">struct</span> <span class="title">cmd</span> *<span class="title">left</span>, <span class="title">struct</span> <span class="title">cmd</span> *<span class="title">right</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipecmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  cmd = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  <span class="built_in">memset</span>(cmd, <span class="number">0</span>, <span class="keyword">sizeof</span>(*cmd));</span><br><span class="line">  cmd-&gt;type = <span class="string">'|'</span>;</span><br><span class="line">  cmd-&gt;left = left;</span><br><span class="line">  cmd-&gt;right = right;</span><br><span class="line">  <span class="keyword">return</span> (struct cmd*)cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parsing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> whitespace[] = <span class="string">" \t\r\n\v"</span>;</span><br><span class="line"><span class="keyword">char</span> symbols[] = <span class="string">"&lt;|&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">gettoken(<span class="keyword">char</span> **ps, <span class="keyword">char</span> *es, <span class="keyword">char</span> **q, <span class="keyword">char</span> **eq)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> *s;</span><br><span class="line">  <span class="keyword">int</span> ret;</span><br><span class="line">  </span><br><span class="line">  s = *ps;</span><br><span class="line">  <span class="keyword">while</span>(s &lt; es &amp;&amp; <span class="built_in">strchr</span>(whitespace, *s))</span><br><span class="line">    s++;</span><br><span class="line">  <span class="keyword">if</span>(q)</span><br><span class="line">    *q = s;</span><br><span class="line">  ret = *s;</span><br><span class="line">  <span class="keyword">switch</span>(*s)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'|'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">    s++;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">    s++;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    ret = <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">while</span>(s &lt; es &amp;&amp; !<span class="built_in">strchr</span>(whitespace, *s) &amp;&amp; !<span class="built_in">strchr</span>(symbols, *s))</span><br><span class="line">      s++;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(eq)</span><br><span class="line">    *eq = s;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(s &lt; es &amp;&amp; <span class="built_in">strchr</span>(whitespace, *s))</span><br><span class="line">    s++;</span><br><span class="line">  *ps = s;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line"><span class="built_in">peek</span>(<span class="keyword">char</span> **ps, <span class="keyword">char</span> *es, <span class="keyword">char</span> *toks)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> *s;</span><br><span class="line">  </span><br><span class="line">  s = *ps;</span><br><span class="line">  <span class="keyword">while</span>(s &lt; es &amp;&amp; <span class="built_in">strchr</span>(whitespace, *s))</span><br><span class="line">    s++;</span><br><span class="line">  *ps = s;</span><br><span class="line">  <span class="keyword">return</span> *s &amp;&amp; <span class="built_in">strchr</span>(toks, *s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct cmd *<span class="title">parseline</span><span class="params">(<span class="keyword">char</span>**, <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="function">struct cmd *<span class="title">parsepipe</span><span class="params">(<span class="keyword">char</span>**, <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"><span class="function">struct cmd *<span class="title">parseexec</span><span class="params">(<span class="keyword">char</span>**, <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// make a copy of the characters in the input buffer, starting from s through es.</span></span><br><span class="line"><span class="comment">// null-terminate the copy to make it a string.</span></span><br><span class="line"><span class="keyword">char</span> </span><br><span class="line">*mkcopy(<span class="keyword">char</span> *s, <span class="keyword">char</span> *es)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> n = es - s;</span><br><span class="line">  <span class="keyword">char</span> *c = <span class="built_in">malloc</span>(n+<span class="number">1</span>);</span><br><span class="line">  assert(c);</span><br><span class="line">  <span class="built_in">strncpy</span>(c, s, n);</span><br><span class="line">  c[n] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>*</span></span><br><span class="line"><span class="class"><span class="title">parsecmd</span>(<span class="title">char</span> *<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> *es;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line">  es = s + <span class="built_in">strlen</span>(s);</span><br><span class="line">  cmd = parseline(&amp;s, es);</span><br><span class="line">  <span class="built_in">peek</span>(&amp;s, es, <span class="string">""</span>);</span><br><span class="line">  <span class="keyword">if</span>(s != es)&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"leftovers: %s\n"</span>, s);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>*</span></span><br><span class="line"><span class="class"><span class="title">parseline</span>(<span class="title">char</span> **<span class="title">ps</span>, <span class="title">char</span> *<span class="title">es</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line">  cmd = parsepipe(ps, es);</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>*</span></span><br><span class="line"><span class="class"><span class="title">parsepipe</span>(<span class="title">char</span> **<span class="title">ps</span>, <span class="title">char</span> *<span class="title">es</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  cmd = parseexec(ps, es);</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">peek</span>(ps, es, <span class="string">"|"</span>))&#123;</span><br><span class="line">    gettoken(ps, es, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    cmd = pipecmd(cmd, parsepipe(ps, es));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>*</span></span><br><span class="line"><span class="class"><span class="title">parseredirs</span>(<span class="title">struct</span> <span class="title">cmd</span> *<span class="title">cmd</span>, <span class="title">char</span> **<span class="title">ps</span>, <span class="title">char</span> *<span class="title">es</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> tok;</span><br><span class="line">  <span class="keyword">char</span> *q, *eq;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">peek</span>(ps, es, <span class="string">"&lt;&gt;"</span>))&#123;</span><br><span class="line">    tok = gettoken(ps, es, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(gettoken(ps, es, &amp;q, &amp;eq) != <span class="string">'a'</span>) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"missing file for redirection\n"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span>(tok)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">      cmd = redircmd(cmd, mkcopy(q, eq), <span class="string">'&lt;'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">      cmd = redircmd(cmd, mkcopy(q, eq), <span class="string">'&gt;'</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>*</span></span><br><span class="line"><span class="class"><span class="title">parseexec</span>(<span class="title">char</span> **<span class="title">ps</span>, <span class="title">char</span> *<span class="title">es</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> *q, *eq;</span><br><span class="line">  <span class="keyword">int</span> tok, argc;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">execcmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">ret</span>;</span></span><br><span class="line">  </span><br><span class="line">  ret = execcmd();</span><br><span class="line">  cmd = (struct execcmd*)ret;</span><br><span class="line"></span><br><span class="line">  argc = <span class="number">0</span>;</span><br><span class="line">  ret = parseredirs(ret, ps, es);</span><br><span class="line">  <span class="keyword">while</span>(!<span class="built_in">peek</span>(ps, es, <span class="string">"|"</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>((tok=gettoken(ps, es, &amp;q, &amp;eq)) == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(tok != <span class="string">'a'</span>) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"syntax error\n"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cmd-&gt;argv[argc] = mkcopy(q, eq);</span><br><span class="line">    argc++;</span><br><span class="line">    <span class="keyword">if</span>(argc &gt;= MAXARGS) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"too many args\n"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ret = parseredirs(ret, ps, es);</span><br><span class="line">  &#125;</span><br><span class="line">  cmd-&gt;argv[argc] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://blog.mysakure.com/2019/11/Implement-a-Shell-by-yourself-MIT-xv6-shell/&quot;&gt;Implement a Shell by yourself – MIT xv6 shell(转载)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看了几天的xv6​的shell作业，总算看懂一点点，感觉看懂别人的代码比自己写代码还难。&lt;/p&gt;
&lt;p&gt;由于我本身太菜了，理解可能有诸多偏差，希望各位不吝赐教。&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://blog.mysakure.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="xv6" scheme="https://blog.mysakure.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/xv6/"/>
    
    
      <category term="操作系统" scheme="https://blog.mysakure.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="xv6" scheme="https://blog.mysakure.com/tags/xv6/"/>
    
      <category term="shell" scheme="https://blog.mysakure.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title> Implement a Shell by yourself -- MIT xv6 shell(转载)</title>
    <link href="https://blog.mysakure.com/2019/11/Implement-a-Shell-by-yourself-MIT-xv6-shell/"/>
    <id>https://blog.mysakure.com/2019/11/Implement-a-Shell-by-yourself-MIT-xv6-shell/</id>
    <published>2019-11-09T01:42:05.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载来自<a href="https://blog.csdn.net/cinmyheart/article/details/45122619，仅供个人学习使用">https://blog.csdn.net/cinmyheart/article/details/45122619，仅供个人学习使用</a></p></blockquote><h2 id="Implement-a-Shell-by-yourself-–-MIT-xv6-shell"><a href="#Implement-a-Shell-by-yourself-–-MIT-xv6-shell" class="headerlink" title="Implement a Shell by yourself – MIT xv6 shell"></a>Implement a Shell by yourself – MIT xv6 shell</h2><p>这个其实是作为6.828的一个小课堂作业 …</p><p>着重分析构建思想和过程，具体代码实现去github可以找到．</p><p><a href="https://github.com/jasonleaster/MIT_6_828_assignments_2012/blob/homework1/sh.c">https://github.com/jasonleaster/MIT_6_828_assignments_2012/blob/homework1/sh.c</a></p><a id="more"></a><p>———————————– 大家好，我是分割线 ——————————————————————-</p><p>这里主要实现了基础的三类命令</p><p>可执行的程序命令<br>重定向命令<br>管道命令<br>实现的”基类” (原谅我用了这个词)就是struct cmd这个结构体就一个成员，用于记录命令的类型．</p><p>三类, ‘ ‘ 表示可执行程序 ‘|’ 表示管道命令, 　‘&lt;’  和’&gt;’　表示重定向类型．</p><p>每一个类型分别继承基类，派生出对应的三类结构体 </p><p>struct execcmd</p><p>struct redircmd</p><p>struct pipecmd</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXARGS 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// All commands have at least a type. Have looked at the type, the code</span></span><br><span class="line"><span class="comment">// typically casts the *cmd to some specific cmd type.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;          <span class="comment">//  ' ' (exec), | (pipe), '&lt;' or '&gt;' for redirection</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">execcmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;              <span class="comment">// ' '</span></span><br><span class="line">  <span class="keyword">char</span> *argv[MAXARGS];   <span class="comment">// arguments to the command to be exec-ed</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redircmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;          <span class="comment">// &lt; or &gt; </span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">cmd</span>;</span>   <span class="comment">// the command to be run (e.g., an execcmd)</span></span><br><span class="line">  <span class="keyword">char</span> *file;        <span class="comment">// the input/output file</span></span><br><span class="line">  <span class="keyword">int</span> mode;          <span class="comment">// the mode to open the file with</span></span><br><span class="line">  <span class="keyword">int</span> fd;            <span class="comment">// the file descriptor number to use for the file</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipecmd</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> type;          <span class="comment">// |</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">left</span>;</span>  <span class="comment">// left side of pipe</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">right</span>;</span> <span class="comment">// right side of pipe</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于可执行命令，主要记录可执行程序的程序名字还有各种选项参数．所以会有 char* argv[MAXARGS]</p><p>对于重定向命令，主要记录 cmd 即触发这个重定向的程序比方说 ./a.out &gt; tmp.txt</p><p>那么cmd就是记录的./a.out　重定向到那个文件的文件名 char *file指针指向这个文件名．</p><p>对于管道，           则主要记录管道左右两侧的命令</p><p>void runcmd(struct cmd * cmd);</p><p>这个函数是真正驱动调用实现shell的核心．负责调用系统接口函数 execv(), open(), close(), dup(), pipe()等等一系列函数，来完成我们既定的目标．</p><p>作业也就是补全这个函数．</p><p>这是个递归的函数！很有意思．</p><p>你会发现，shell的命令实现居然是递归的哈哈</p><p>下面是我画的一个简单的流程图</p><p>你会发现，是先处理可执行程序，然后检查输入中是否有管道，如果有，那么递归的调用parsepipe去构建这些可执行程序间的输入输出的关系．直到所有管道被检查完，那么返回parsecmd()，进入到runcmd()开始执行命令．<br><img src="https://cdn.mysakure.cn/hexo/img/20150419132244069.png" alt=""></p><p>这里是主函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">main(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">  <span class="keyword">int</span> fd, r;</span><br><span class="line">  <span class="comment">// Read and run input commands.</span></span><br><span class="line">  <span class="keyword">while</span>(getcmd(buf, <span class="keyword">sizeof</span>(buf)) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(buf[<span class="number">0</span>] == <span class="string">'c'</span> &amp;&amp; buf[<span class="number">1</span>] == <span class="string">'d'</span> &amp;&amp; buf[<span class="number">2</span>] == <span class="string">' '</span>)&#123;</span><br><span class="line">      <span class="comment">// Clumsy but will have to do for now.</span></span><br><span class="line">      <span class="comment">// Chdir has no effect on the parent if run in the child.</span></span><br><span class="line">      buf[<span class="built_in">strlen</span>(buf)<span class="number">-1</span>] = <span class="number">0</span>;  <span class="comment">// chop \n</span></span><br><span class="line">      <span class="keyword">if</span>(chdir(buf+<span class="number">3</span>) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"cannot cd %s\n"</span>, buf+<span class="number">3</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fork1() == <span class="number">0</span>)</span><br><span class="line">      runcmd(parsecmd(buf));</span><br><span class="line">    wait(&amp;r);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用getcmd()在标准输入读取sizeof(buf)大小的字符，然后，写入到buf中．</p><p>那个 if(buf[0] …. )是判断你是不是输入了 cd命令 如果是把buf尾部赋值为0，这样buf看起来就是储存的一个字符串,</p><p>然后调用chdir()　更换当buf+3开始的字符串指定的路径．</p><p>接着continue继续读取命令啦．．．</p><p>如果你不更换路径了</p><p>我们就fork1()出一个子进程，parent process就一直等待子进程挂掉．．．等啊等．．等啊等．．</p><p>这个时候，子进程就开始调用parsecmd()去分析你输入的命令字符串咯．．．</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>*</span></span><br><span class="line"><span class="class"><span class="title">parsecmd</span>(<span class="title">char</span> *<span class="title">s</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> *es;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line">  es = s + <span class="built_in">strlen</span>(s);</span><br><span class="line">  cmd = parseline(&amp;s, es);</span><br><span class="line">  <span class="built_in">peek</span>(&amp;s, es, <span class="string">""</span>);</span><br><span class="line">  <span class="keyword">if</span>(s != es)&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"leftovers: %s\n"</span>, s);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>es指针指向字符串的末端，确切的说是空字符处</p><p>然后去调用 parseline(&amp;s, es)</p><p>parseline() 看起来太弱了，就是一层简单的封装．实际核心函数还是parsepipe</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>*</span></span><br><span class="line"><span class="class"><span class="title">parseline</span>(<span class="title">char</span> **<span class="title">ps</span>, <span class="title">char</span> *<span class="title">es</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line">  cmd = parsepipe(ps, es);</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>*</span></span><br><span class="line"><span class="class"><span class="title">parsepipe</span>(<span class="title">char</span> **<span class="title">ps</span>, <span class="title">char</span> *<span class="title">es</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line"></span><br><span class="line">  cmd = parseexec(ps, es);</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">peek</span>(ps, es, <span class="string">"|"</span>))&#123;</span><br><span class="line">    gettoken(ps, es, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    cmd = pipecmd(cmd, parsepipe(ps, es));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要说一说里面关键的几个子函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">char</span> whitespace[] = <span class="string">" \t\r\n\v"</span>;</span><br><span class="line"><span class="keyword">char</span> symbols[] = <span class="string">"&lt;|&gt;"</span>;</span><br></pre></td></tr></table></figure><p>经常会看到下面这个while循环，作用是啥呢？</p><p>s 指向我们输入的命令字符串，strchr通过检查 *s是否是 whilespace里的任意一个字符，如果是其中某个字符，那么我们就要跳过这个字符，知道我们把s移动到指向一个非空格类的字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(s &lt; es &amp;&amp; <span class="built_in">strchr</span>(whitespace, *s))</span><br><span class="line">  s++;</span><br></pre></td></tr></table></figure><p>再看另外一个一旦遇到空格字符，或者symbols中的任意一个字符，我们就不再移动指针s</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(s &lt; es &amp;&amp; !<span class="built_in">strchr</span>(whitespace, *s) &amp;&amp; !<span class="built_in">strchr</span>(symbols, *s))</span><br><span class="line">      s++;</span><br></pre></td></tr></table></figure><p>下面是实现pipe的一部分．</p><p>分析：</p><p>第一次调用fork1()　产生 child process 1 该进程用于运行 pcmd-&gt;left　指向的进程</p><p>第二次调用fork1()　产生 child process 2 该进程用于运行 pcmd-&gt;right　指向的进程</p><p>child process 1 由于先 close(1)那么文件描述符1就被空余出来了, 调用dup(p[1])把 child process 1的标准输出(文件描述符默认的是1)和管道的输出关联起来</p><p>child process 2的伎俩差不多，只是把进程的标准输入关闭了，把从管道的输入作为进程的标准输入来用．</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(fork1() == <span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="built_in">close</span>(<span class="number">1</span>);</span><br><span class="line">     dup(p[<span class="number">1</span>]);</span><br><span class="line">     <span class="built_in">close</span>(p[<span class="number">0</span>]);</span><br><span class="line">     <span class="built_in">close</span>(p[<span class="number">1</span>]);</span><br><span class="line">     runcmd(pcmd-&gt;left);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>(fork1() == <span class="number">0</span>)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="built_in">close</span>(<span class="number">0</span>);</span><br><span class="line">     dup(p[<span class="number">0</span>]);</span><br><span class="line">     <span class="built_in">close</span>(p[<span class="number">0</span>]);</span><br><span class="line">     <span class="built_in">close</span>(p[<span class="number">1</span>]);</span><br><span class="line">     runcmd(pcmd-&gt;right);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">close</span>(p[<span class="number">0</span>]);</span><br><span class="line"> <span class="built_in">close</span>(p[<span class="number">1</span>]);</span><br><span class="line"> wait();</span><br><span class="line"> wait();</span><br></pre></td></tr></table></figure><p>我刚差点被自己蠢哭了，睡了三个小时哈哈哈</p><p>这里有两个 wait(),　为什么呢？奇怪．．</p><p>一点都不奇怪．．必须两个wait()，因为这里有两个子进程，parent process必须等这两个进程都挂了之后再结束．</p><p>execcmd()返回一个struct cmd()结构体.</p><p>同样的*cmd()函数都会返回一个对应的 *结构体</p><p>值得特别强调好玩的事情是，你会发现这里 execcmd()返回的是一个 struct cmd*　指针</p><p>但是execcmd()函数确实申请的是一个struct execcmd()结构体．那么问题就来了．．怎么会这样．</p><p>回过头去观察四种结构体的之间的关系你就会发现，这里巧妙之处就在于，他们的第一个成员都是相同的！</p><p>返回了一个＂基类＂指针．</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmd</span>*</span></span><br><span class="line"><span class="class"><span class="title">parseexec</span>(<span class="title">char</span> **<span class="title">ps</span>, <span class="title">char</span> *<span class="title">es</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> *q, *eq;</span><br><span class="line">  <span class="keyword">int</span> tok, argc;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">execcmd</span> *<span class="title">cmd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">cmd</span> *<span class="title">ret</span>;</span></span><br><span class="line">  </span><br><span class="line">  ret = execcmd();</span><br><span class="line">  cmd = (struct execcmd*)ret;</span><br><span class="line"></span><br><span class="line">  argc = <span class="number">0</span>;</span><br><span class="line">  ret = parseredirs(ret, ps, es);</span><br><span class="line">  <span class="keyword">while</span>(!<span class="built_in">peek</span>(ps, es, <span class="string">"|"</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>((tok=gettoken(ps, es, &amp;q, &amp;eq)) == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(tok != <span class="string">'a'</span>) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"syntax error\n"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cmd-&gt;argv[argc] = mkcopy(q, eq);</span><br><span class="line">    argc++;</span><br><span class="line">    <span class="keyword">if</span>(argc &gt;= MAXARGS) &#123;</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"too many args\n"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ret = parseredirs(ret, ps, es);</span><br><span class="line">  &#125;</span><br><span class="line">  cmd-&gt;argv[argc] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的运行效果．</p><p><img src="https://cdn.mysakure.cn/hexo/img/20150419164600957.png" alt=""></p><p>能在本地的文件 ./tmp.txt里找到输出．</p><p>update: 2015.04.19　原本的程序是不能调用/bin/目录下的程序的，那多无聊哇．．．我该了部分代码．然后还改了那天杀的两个对齐．．．</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载来自&lt;a href=&quot;https://blog.csdn.net/cinmyheart/article/details/45122619，仅供个人学习使用&quot;&gt;https://blog.csdn.net/cinmyheart/article/details/45122619，仅供个人学习使用&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Implement-a-Shell-by-yourself-–-MIT-xv6-shell&quot;&gt;&lt;a href=&quot;#Implement-a-Shell-by-yourself-–-MIT-xv6-shell&quot; class=&quot;headerlink&quot; title=&quot;Implement a Shell by yourself – MIT xv6 shell&quot;&gt;&lt;/a&gt;Implement a Shell by yourself – MIT xv6 shell&lt;/h2&gt;&lt;p&gt;这个其实是作为6.828的一个小课堂作业 …&lt;/p&gt;
&lt;p&gt;着重分析构建思想和过程，具体代码实现去github可以找到．&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jasonleaster/MIT_6_828_assignments_2012/blob/homework1/sh.c&quot;&gt;https://github.com/jasonleaster/MIT_6_828_assignments_2012/blob/homework1/sh.c&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://blog.mysakure.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="xv6" scheme="https://blog.mysakure.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/xv6/"/>
    
    
      <category term="操作系统" scheme="https://blog.mysakure.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="xv6" scheme="https://blog.mysakure.com/tags/xv6/"/>
    
  </entry>
  
  <entry>
    <title>Operating system interfaces</title>
    <link href="https://blog.mysakure.com/2019/11/Operating-system-interfaces/"/>
    <id>https://blog.mysakure.com/2019/11/Operating-system-interfaces/</id>
    <published>2019-11-06T13:21:58.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>大部分内容来自xv6，</p></blockquote><p>shell是一个简单的读取用户输入指令并执行它们的程序，是一个用户级程序，而不是内核级程序，这意味着shell可以被简单的代替。实际上，现代的Linux确实有各种各样的shell。</p><h3 id="Processes-and-memory"><a href="#Processes-and-memory" class="headerlink" title="Processes and memory"></a>Processes and memory</h3><p>一个进程通过fork系统调用产生一个新的进程。fork创造一个新的进程，称为子进程，和调用进程（父进程）有着相同的内存内容。fork调用一次，返回两次，在父进程中返回子进程的PID，在子进程中返回0。例如下面的程序：</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> pid = fork();</span><br><span class="line"><span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"parent: child=%d\n"</span>, pid);</span><br><span class="line">pid = wait();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"child %d is done\n"</span>, pid);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"child: exiting\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"fork error\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exit系统调用使调用进程终止运行，并返还拥有的系统资源，例如内存和打开文件。wait返回一个退出的子进程的pid。如果没有子进程退出，将会等待某个子进程退出。</p><p>子进程与父进程在不同的内存和寄存器中运行，改变其中一个进程的内容不会影响另一个。</p><p>exec系统调用永不返回，他将用一个新的内存镜像代替当前的进程的内存内容。新的内存镜像必须有某个特定的格式。exec调用继承调用进程的pid和打开文件。exec调用有两个参数，文件的名字和可执行命令的命令行参数，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *argv[<span class="number">3</span>];</span><br><span class="line">argv[<span class="number">0</span>] = <span class="string">"echo"</span>;</span><br><span class="line">argv[<span class="number">1</span>] = <span class="string">"hello"</span>;</span><br><span class="line">argv[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">exec(<span class="string">"/bin/echo"</span>, argv);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"exec error\n"</span>);</span><br></pre></td></tr></table></figure><p>This fragment replaces the calling program with an instance of the program /bin/echo running with the argument list echo hello. Most programs ignore the first argument, which is conventionally the name of the program.</p><p>xv6的shell利用上述的系统调用帮助用户执行程序，main函数关于shell的结构是简单的。main利用getcmd函数读取命令行输入，然后调用fork函数，生成一个shell的子进程。父进程shell简单的调用wait等待子进程执行结束，子进程通过exec系统调用执行用户输入的命令。</p><p>一个进程可以通过sbrk(n)申请内存空间。</p><h3 id="I-O-and-File-descriptors"><a href="#I-O-and-File-descriptors" class="headerlink" title="I/O and File descriptors"></a>I/O and File descriptors</h3><p>一个文件描述符是一个小的整数代表着一个内核维护的对象，可以被进程读取或者写入。一个进程可以通过打开一个文件，目录或者设备，或者通过新建一个管道，或者通过复制一个已存在的文件描述符。文件描述符为文件，管道和设备提供了一个统一的接口，使他们看起来都像是统一的字节流。</p><p>Internally, the xv6 kernel uses the file descriptor as an index into a per-process table, so that every process has a private space of file descriptors starting at zero. By convention, a process reads from file descriptor 0 (standard input), writes output to file descriptor 1 (standard output), and writes error messages to file descriptor 2 (standard error). As we will see, the shell exploits the convention to implement I/O redirection<br>and pipelines. The shell ensures that it always has three file descriptors open (8507) ,which are by default file descriptors for the console.</p><p>进程在文件描述符0读入，在文件描述符1输出，在文件描述符3输出标准错误。shell保证他总是有三个文件描述符打开。</p><p>The read and write system calls read bytes from and write bytes to open files named by file descriptors. The call read(fd, buf, n) reads at most n bytes from the file descriptor fd, copies them into buf, and returns the number of bytes read. Each file descriptor that refers to a file has an offset associated with it. Read reads data from the current file offset and then advances that offset by the number of bytes read: a subsequent read will return the bytes following the ones returned by the first read. When there are no more bytes to read, read returns zero to signal the end of the file. The call write(fd, buf, n) writes n bytes from buf to the file descriptor fd and returns the number of bytes written. Fewer than n bytes are written only when an error occurs. Like read, write writes data at the current file offset and then advances that offset by the number of bytes written: each write picks up where the previous one left off.</p><p>cat命令将它的标准输入复制到标准输出。</p><p>一个值得注意的事情是，cat并不知道它的输入是来自于一个文件，一个console，或者一个管道。同样的，他并不知道它的输出指向哪里。标准输入为文件描述符0，标准输出为1允许cat一个简单的实现。</p><p>close将会释放一个文件描述符，使他可以被一个新的文件使用。A newly allocated file descriptor is al-<br>ways the lowest-numbered unused descriptor of the current process. File descriptors and fork interact to make I/O redirection easy to implement. Fork copies the parent’s file descriptor table along with its memory, so that the child starts with exactly the same open files as the parent. The system call exec replaces the calling process’s memory but preserves its file table. This behavior allows the shell to<br>implement I/O redirection by forking, reopening chosen file descriptors, and then execing the new program.</p><p>exec会替换父进程的内存内容，但是会保留文件描述符。</p><p>Here is a simplified version of the code a shell runs for the<br>command cat &lt;input.txt:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *argv[<span class="number">2</span>];</span><br><span class="line">argv[<span class="number">0</span>] = <span class="string">"cat"</span>;</span><br><span class="line">argv[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">close</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">open</span>(<span class="string">"input.txt"</span>, O_RDONLY);</span><br><span class="line">exec(<span class="string">"cat"</span>, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After the child closes file descriptor 0, open is guaranteed to use that file descriptor for the newly opened input.txt: 0 will be the smallest available file descriptor. Cat then executes with file descriptor 0 (standard input) referring to input.txt.</p><p>The code for I/O redirection in the xv6 shell works in exactly this way (8430) . Recall that at this point in the code the shell has already forked the child shell and that runcmd will call exec to load the new program. Now it should be clear why it is a good idea that fork and exec are separate calls. This separation allows the shell to fix up the child process before the child runs the intended program. Although fork copies the file descriptor table, each underlying file offset is shared between parent and child. Consider this example:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">write</span>(<span class="number">1</span>, <span class="string">"hello "</span>, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">exit</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">wait();</span><br><span class="line"><span class="built_in">write</span>(<span class="number">1</span>, <span class="string">"world\n"</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>At the end of this fragment, the file attached to file descriptor 1 will contain the data hello world. The write in the parent (which, thanks to wait, runs only after the child is done) picks up where the child’s write left off. This behavior helps produce sequential output from sequences of shell commands, like (echo hello; echo world)&gt;output.txt.</p><p>The dup system call duplicates an existing file descriptor, returning a new one that refers to the same underlying I/O object. Both file descriptors share an offset, just as the file descriptors duplicated by fork do. This is another way to write hello world into a file:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fd = dup(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">write</span>(<span class="number">1</span>, <span class="string">"hello "</span>, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">write</span>(fd, <span class="string">"world\n"</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure><p>Two file descriptors share an offset if they were derived from the same original file descriptor by a sequence of fork and dup calls. Otherwise file descriptors do not share offsets, even if they resulted from open calls for the same file. Dup allows shells to implement commands like this: ls existing-file non-existing-file &gt; tmp1 2&gt;&amp;1. The 2&gt;&amp;1 tells the shell to give the command a file descriptor 2 that is a dupli- cate of descriptor 1. Both the name of the existing file and the error message for the non-existing file will show up in the file tmp1. The xv6 shell doesn’t support I/O redi- rection for the error file descriptor, but now you know how to implement it.</p><p>File descriptors are a powerful abstraction, because they hide the details of what they are connected to: a process writing to file descriptor 1 may be writing to a file, to a device like the console, or to a pipe.</p><h3 id="Pipes"><a href="#Pipes" class="headerlink" title="Pipes"></a>Pipes</h3><p>A pipe is a small kernel buffer exposed to processes as a pair of file descriptors, one for reading and one for writing. Writing data to one end of the pipe makes that data available for reading from the other end of the pipe. Pipes provide a way for processes to communicate. The following example code runs the program wc with standard input connected to the read end of a pipe.</p><p>管道是进程通信的一种方式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> *argv[<span class="number">2</span>];</span><br><span class="line">argv[<span class="number">0</span>] = <span class="string">"wc"</span>;</span><br><span class="line">argv[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">pipe(p);</span><br><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">close</span>(<span class="number">0</span>);</span><br><span class="line">dup(p[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">close</span>(p[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">close</span>(p[<span class="number">1</span>]);</span><br><span class="line">exec(<span class="string">"/bin/wc"</span>, argv);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">write</span>(p[<span class="number">1</span>], <span class="string">"hello world\n"</span>, <span class="number">12</span>);</span><br><span class="line"><span class="built_in">close</span>(p[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">close</span>(p[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The program calls pipe, which creates a new pipe and records the read and write file descriptors in the array p. After fork, both parent and child have file descriptors refer- ring to the pipe. The child dups the read end onto file descriptor 0, closes the file de- scriptors in p, and execs wc. When wc reads from its standard input, it reads from the pipe. The parent writes to the write end of the pipe and then closes both of its file descriptors.</p><p>If no data is available, a read on a pipe waits for either data to be written or all file descriptors referring to the write end to be closed; in the latter case, read will re- turn 0, just as if the end of a data file had been reached. The fact that read blocks until it is impossible for new data to arrive is one reason that it’s important for the child to close the write end of the pipe before executing wc above: if one of wc’s file descriptors referred to the write end of the pipe, wc would never see end-of-file.</p><p>The xv6 shell implements pipelines such as grep fork sh.c | wc -l in a man- ner similar to the above code (8450) . The child process creates a pipe to connect the left end of the pipeline with the right end. Then it calls runcmd for the left end of the pipeline and runcmd for the right end, and waits for the left and the right ends to fin- ish, by calling wait twice. The right end of the pipeline may be a command that itselfincludes a pipe (e.g., a | b | c), which itself forks two new child processes (one for b and one for c). Thus, the shell may create a tree of processes. The leaves of this tree are commands and the interior nodes are processes that wait until the left and right children complete. In principle, you could have the interior nodes run the left end of a pipeline, but doing so correctly would complicate the implementation. Pipes may seem no more powerful than temporary files: the pipeline</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo hello world | wc</span><br></pre></td></tr></table></figure><p>could be implemented without pipes as</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo hello world &gt;/tmp/xyz; wc &lt;/tmp/xyz</span><br></pre></td></tr></table></figure><p>There are at least three key differences between pipes and temporary files. First, pipes automatically clean themselves up; with the file redirection, a shell would have to be careful to remove /tmp/xyz when done. Second, pipes can pass arbitrarily long streams of data, while file redirection requires enough free space on disk to store all the data. Third, pipes allow for synchronization: two processes can use a pair of pipes to send messages back and forth to each other, with each read blocking its calling pro- cess until the other process has sent data with write.</p><h3 id="File-system"><a href="#File-system" class="headerlink" title="File system"></a>File system</h3><p>The xv6 file system provides data files, which are uninterpreted byte arrays, and directories, which contain named references to data files and other directories. Xv6 implements directories as a special kind of file. The directories form a tree, starting at a special directory called the root. A path like /a/b/c refers to the file or directory named c inside the directory named b inside the directory named a in the root direc- tory /. Paths that don’t begin with / are evaluated relative to the calling process’s cur- rent directory, which can be changed with the chdir system call. Both these code fragments open the same file (assuming all the directories involved exist):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chdir(<span class="string">"/a"</span>);</span><br><span class="line">chdir(<span class="string">"b"</span>);</span><br><span class="line"><span class="built_in">open</span>(<span class="string">"c"</span>, O_RDONLY);</span><br><span class="line"><span class="built_in">open</span>(<span class="string">"/a/b/c"</span>, O_RDONLY);</span><br></pre></td></tr></table></figure><p>The first fragment changes the process’s current directory to /a/b; the second neither refers to nor modifies the process’s current directory. </p><p>There are multiple system calls to create a new file or directory: mkdir creates a new directory, open with the O_CREATE flag creates a new data file, and mknod creates a new device file. This example illustrates all three:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span>(<span class="string">"/dir"</span>);</span><br><span class="line">fd = <span class="built_in">open</span>(<span class="string">"/dir/file"</span>, O_CREATE|O_WRONLY);</span><br><span class="line"><span class="built_in">close</span>(fd);</span><br><span class="line">mknod(<span class="string">"/console"</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>Mknod creates a file in the file system, but the file has no contents. Instead, the file’s metadata marks it as a device file and records the major and minor device numbers (the two arguments to mknod), which uniquely identify a kernel device. When a process later opens the file, the kernel diverts read and write system calls to the kernel device implementation instead of passing them to the file system.</p><p>fstat retrieves information about the object a file descriptor refers to. It fills in a struct stat, defined in stat.h as:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T_DIR  1   <span class="comment">// Directory</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T_FILE 2   <span class="comment">// File</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T_DEV  3   <span class="comment">// Device</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> &#123;</span></span><br><span class="line">  short type;  <span class="comment">// Type of file</span></span><br><span class="line">  <span class="keyword">int</span> dev;     <span class="comment">// File system's disk device</span></span><br><span class="line">  uint ino;    <span class="comment">// Inode number</span></span><br><span class="line">  short nlink; <span class="comment">// Number of links to file</span></span><br><span class="line">  uint <span class="built_in">size</span>;   <span class="comment">// Size of file in bytes</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>A file’s name is distinct from the file itself; the same underlying file, called an in- ode, can have multiple names, called links. The link system call creates another file system name referring to the same inode as an existing file. This fragment creates a new file named both a and b.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">"a"</span>, O_CREATE|O_WRONLY);</span><br><span class="line">link(<span class="string">"a"</span>, <span class="string">"b"</span>);</span><br></pre></td></tr></table></figure><p>Reading from or writing to a is the same as reading from or writing to b. Each inode is identified by a unique inode number. After the code sequence above, it is possible to determine that a and b refer to the same underlying contents by inspecting the result of fstat: both will return the same inode number (ino), and the nlink count will be set to 2. </p><p>The unlink system call removes a name from the file system. The file’s inode and the disk space holding its content are only freed when the file’s link count is zero and no file descriptors refer to it. Thus adding</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlink(<span class="string">"a"</span>);</span><br></pre></td></tr></table></figure><p>to the last code sequence leaves the inode and file content accessible as b. Further- more,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fd = <span class="built_in">open</span>(<span class="string">"/tmp/xyz"</span>, O_CREATE|O_RDWR);</span><br><span class="line">unlink(<span class="string">"/tmp/xyz"</span>);</span><br></pre></td></tr></table></figure><p>is an idiomatic way to create a temporary inode that will be cleaned up when the pro- cess closes fd or exits.</p><p>Xv6 commands for file system operations are implemented as user-level programs such as mkdir, ln, rm, etc. This design allows anyone to extend the shell with new user commands. In hind-sight this plan seems obvious, but other systems designed at the time of Unix often built such commands into the shell (and built the shell into the kernel). </p><p>One exception is cd, which is built into the shell (8516) . cd must change the cur- rent working directory of the shell itself. If cd were run as a regular command, then the shell would fork a child process, the child process would run cd, and cd would change the child’s working directory. The parent’s (i.e., the shell’s) working directory would not change.</p><p>cd是shell内置的命令。如果cd不是shell的命令，那么shell将会fork一个子进程，子进程更改工作目录，但是父进程的工作目录不会改变。</p><h3 id="Real-world"><a href="#Real-world" class="headerlink" title="Real world"></a>Real world</h3><p>Unix’s combination of the ‘‘standard’’ file descriptors, pipes, and convenient shell syntax for operations on them was a major advance in writing general-purpose reusable programs. The idea sparked a whole culture of ‘‘software tools’’ that was re- sponsible for much of Unix’s power and popularity, and the shell was the first so-called ‘‘scripting language.’’ The Unix system call interface persists today in systems like BSD, Linux, and Mac OS X.</p><p>Modern kernels provide many more system calls, and many more kinds of kernel services, than xv6. For the most part, modern Unix-derived operating systems have not followed the early Unix model of exposing devices as special files, like the console device file discussed above. The authors of Unix went on to build Plan 9, which ap- plied the ‘‘resources are files’’ concept to modern facilities, representing networks, graphics, and other resources as files or file trees.</p><p>The file system abstraction has been a powerful idea, most recently applied to network resources in the form of the World Wide Web. Even so, there are other mod- els for operating system interfaces. Multics, a predecessor of Unix, abstracted file stor- age in a way that made it look like memory, producing a very different flavor of inter- face. The complexity of the Multics design had a direct influence on the designers of Unix, who tried to build something simpler.</p><p>This book examines how xv6 implements its Unix-like interface, but the ideas and concepts apply to more than just Unix. Any operating system must multiplex process- es onto the underlying hardware, isolate processes from each other, and provide mech- anisms for controlled inter-process communication. After studying xv6, you should be able to look at other, more complex operating systems and see the concepts underlying xv6 in those systems as well.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;大部分内容来自xv6，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;shell是一个简单的读取用户输入指令并执行它们的程序，是一个用户级程序，而不是内核级程序，这意味着shell可以被简单的代替。实际上，现代的Linux确实有各种各样的shell。&lt;/p&gt;
&lt;h3 id=&quot;Processes-and-memory&quot;&gt;&lt;a href=&quot;#Processes-and-memory&quot; class=&quot;headerlink&quot; title=&quot;Processes and memory&quot;&gt;&lt;/a&gt;Processes and memory&lt;/h3&gt;&lt;p&gt;一个进程通过fork系统调用产生一个新的进程。fork创造一个新的进程，称为子进程，和调用进程（父进程）有着相同的内存内容。fork调用一次，返回两次，在父进程中返回子进程的PID，在子进程中返回0。例如下面的程序：&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://blog.mysakure.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="xv6" scheme="https://blog.mysakure.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/xv6/"/>
    
    
      <category term="操作系统" scheme="https://blog.mysakure.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="xv6" scheme="https://blog.mysakure.com/tags/xv6/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #598 (Div. 3)</title>
    <link href="https://blog.mysakure.com/2019/11/Codeforces-Round-598-Div-3/"/>
    <id>https://blog.mysakure.com/2019/11/Codeforces-Round-598-Div-3/</id>
    <published>2019-11-05T03:13:49.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<p>我会做的几道题目里，思维难度都很低，但是好像。。。代码有点难调啊</p><a id="more"></a><p><a href="https://codeforces.com/contest/1256/problem/A">Payment Without Change</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 04.11.2019 22:00:19       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line"><span class="keyword">int</span> a,b,c,d;</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line"><span class="keyword">if</span>(a*c&gt;=d)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&gt;=d%c)<span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b&gt;=d-a*c)<span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span>  <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://codeforces.com/contest/1256/problem/B">Minimize the Permutation</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 04.11.2019 22:06:44       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">110</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],res[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)res[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">1</span>,cur=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;n)&#123;</span><br><span class="line"><span class="keyword">while</span>(res[cur])++cur;</span><br><span class="line">res[cur]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[l]==cur)&#123;</span><br><span class="line">++l;++r;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(a[r]!=cur)&#123;</span><br><span class="line">res[a[r]]=<span class="number">1</span>;</span><br><span class="line">++r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=r;i&gt;l;--i)a[i]=a[i<span class="number">-1</span>];</span><br><span class="line">a[l]=cur;</span><br><span class="line">l=r;</span><br><span class="line">res[a[l]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://codeforces.com/contest/1256/problem/C">Platforms Jumping</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 05.11.2019 08:58:13       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> res[maxn],n,m,d,s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;d;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;res[i];</span><br><span class="line">s[i]=s[i<span class="number">-1</span>]+res[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s[m]&gt;n||s[m]+<span class="number">2</span>+(m+<span class="number">1</span>)*(d<span class="number">-1</span>)&lt;n+<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> pos=n+<span class="number">1</span>,cnt=m;</span><br><span class="line"><span class="comment">//cout&lt;&lt;"hello "&lt;&lt;s[cnt-1]+cnt*(d-1)&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">while</span>(cnt&gt;<span class="number">0</span>&amp;&amp;s[cnt<span class="number">-1</span>]+cnt*(d<span class="number">-1</span>)+<span class="number">1</span>&gt;=pos-res[cnt])&#123;</span><br><span class="line">pos-=res[cnt--];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;cnt;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=d<span class="number">-1</span>;++i)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=res[i];++j)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;"debug "&lt;&lt;pos&lt;&lt;" "&lt;&lt;cnt&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(pos-s[cnt]-(cnt==<span class="number">0</span>?<span class="number">0</span>:(cnt<span class="number">-1</span>)*(d<span class="number">-1</span>))<span class="number">-1</span>)/<span class="number">2</span>;++i)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=res[cnt];++i)<span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(pos-s[cnt]-(cnt==<span class="number">0</span>?<span class="number">0</span>:(cnt<span class="number">-1</span>)*(d<span class="number">-1</span>)))/<span class="number">2</span>;++i)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=cnt+<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=res[i];++j)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://codeforces.com/contest/1256/problem/D">Binary String Minimizing</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 04.11.2019 22:43:32       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span>  <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line">ll t,n,k;</span><br><span class="line"><span class="keyword">int</span> a[maxn],dp[maxn],vis[maxn],res[maxn],id;</span><br><span class="line"><span class="keyword">char</span> tmp;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">a[i]=tmp-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)vis[i]=<span class="number">0</span>;</span><br><span class="line">a[n+<span class="number">1</span>]=dp[n+<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">dp[i]=a[i+<span class="number">1</span>]==<span class="number">0</span>?i+<span class="number">1</span>:dp[i+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> inx=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span>(dp[inx]!=<span class="number">-1</span>&amp;&amp;k)&#123;</span><br><span class="line">inx=dp[inx];</span><br><span class="line"><span class="keyword">if</span>(k&gt;=inx-cnt<span class="number">-1</span>)&#123;</span><br><span class="line">vis[inx]=<span class="number">1</span>;</span><br><span class="line">k-=(inx-cnt<span class="number">-1</span>);</span><br><span class="line">++cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">id=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="keyword">if</span>(!vis[i])res[++id]=a[i];</span><br><span class="line"><span class="keyword">if</span>(!flag)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=id;++i)<span class="built_in">cout</span>&lt;&lt;res[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pos=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(res[pos]!=<span class="number">0</span>)++pos;</span><br><span class="line">swap(res[pos],res[pos-k]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=id;++i)<span class="built_in">cout</span>&lt;&lt;res[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我会做的几道题目里，思维难度都很低，但是好像。。。代码有点难调啊&lt;/p&gt;
    
    </summary>
    
    
      <category term="codeforces" scheme="https://blog.mysakure.com/categories/codeforces/"/>
    
    
      <category term="codeforces" scheme="https://blog.mysakure.com/tags/codeforces/"/>
    
      <category term="待补" scheme="https://blog.mysakure.com/tags/%E5%BE%85%E8%A1%A5/"/>
    
  </entry>
  
  <entry>
    <title>Shichikuji and Power Grid</title>
    <link href="https://blog.mysakure.com/2019/11/Shichikuji-and-Power-Grid/"/>
    <id>https://blog.mysakure.com/2019/11/Shichikuji-and-Power-Grid/</id>
    <published>2019-11-02T14:58:23.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="D-Shichikuji-and-Power-Grid"><a href="#D-Shichikuji-and-Power-Grid" class="headerlink" title="D. Shichikuji and Power Grid"></a><a href="https://codeforces.com/contest/1245/problem/d">D. Shichikuji and Power Grid</a></h2><p>这题目很好很刺激</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 02.11.2019 22:21:52       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2010</span>;</span><br><span class="line"><span class="keyword">int</span> n,c[maxn],k[maxn],x[maxn],y[maxn],id;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;a;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;b;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c;</span><br><span class="line">&#125;e[maxn*maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> edge&amp;a,<span class="keyword">const</span> edge&amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.c&lt;b.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> fa[u]==u?u:fa[u]=getf(fa[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">cin</span>&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">cin</span>&gt;&gt;c[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">cin</span>&gt;&gt;k[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">e[++id]=edge&#123;i,j,(<span class="built_in">abs</span>(x[i]-x[j])+<span class="built_in">abs</span>(y[i]-y[j]))*(k[i]+k[j])&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)e[++id]=edge&#123;<span class="number">0</span>,i,c[i]&#125;;</span><br><span class="line">sort(e+<span class="number">1</span>,e+id+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i)fa[i]=i;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=id;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> u=e[i].u,v=e[i].v;</span><br><span class="line"><span class="keyword">int</span> uf=getf(u),vf=getf(v);</span><br><span class="line"><span class="keyword">if</span>(uf==vf)<span class="keyword">continue</span>;</span><br><span class="line">ans+=e[i].c;</span><br><span class="line"><span class="keyword">if</span>(u==<span class="number">0</span>||v==<span class="number">0</span>)a.push_back(u?u:v);</span><br><span class="line"><span class="keyword">else</span>  b.push_back(&#123;u,v&#125;);</span><br><span class="line">fa[uf]=vf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a.<span class="built_in">size</span>()&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:a)<span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;b.<span class="built_in">size</span>()&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:b)<span class="built_in">cout</span>&lt;&lt;x.first&lt;&lt;<span class="string">" "</span>&lt;&lt;x.second&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;D-Shichikuji-and-Power-Grid&quot;&gt;&lt;a href=&quot;#D-Shichikuji-and-Power-Grid&quot; class=&quot;headerlink&quot; title=&quot;D. Shichikuji and Power Grid&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codeforces.com/contest/1245/problem/d&quot;&gt;D. Shichikuji and Power Grid&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这题目很好很刺激&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://blog.mysakure.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="并查集" scheme="https://blog.mysakure.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    
      <category term="并查集" scheme="https://blog.mysakure.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Comet OJ - 2019国庆欢乐赛</title>
    <link href="https://blog.mysakure.com/2019/10/Comet-OJ-2019/"/>
    <id>https://blog.mysakure.com/2019/10/Comet-OJ-2019/</id>
    <published>2019-10-02T11:58:43.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cometoj.com/contest/68/problems">Comet OJ - 2019国庆欢乐赛</a></p><p><a href="https://www.cometoj.com/contest/68/problem/A?problem_id=3933">A</a></p><p>如果四边形右上角严格位于第一象限，那么第一象限必定有两部分。如果左上角严格位于第二象限，那么第二象限必定有两部分，同理可得。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 01.10.2019 19:02:47       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c,d;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(c&gt;<span class="number">0</span>&amp;&amp;d&gt;<span class="number">0</span>)ans+=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> ans+=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a&lt;<span class="number">0</span>&amp;&amp;d&gt;<span class="number">0</span>)ans+=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> ans+=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a&lt;<span class="number">0</span>&amp;&amp;b&lt;<span class="number">0</span>)ans+=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> ans+=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(c&gt;<span class="number">0</span>&amp;&amp;b&lt;<span class="number">0</span>)ans+=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> ans+=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cometoj.com/contest/68/problem/B?problem_id=3934">B</a></p><p>用四个小的去消耗大的。如果不能消耗完，那么结果显而易见。如果消耗完了，那么一个存在一个合适的策略使四个小的内部消耗达到最优策略。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 01.10.2019 19:07:52       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line">ll a[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">rep(i,<span class="number">1</span>,<span class="number">5</span>)<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+<span class="number">5</span>);</span><br><span class="line">reverse(a+<span class="number">1</span>,a+<span class="number">6</span>);</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">2</span>]+a[<span class="number">3</span>]+a[<span class="number">4</span>]+a[<span class="number">5</span>]&lt;=a[<span class="number">1</span>])&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[<span class="number">2</span>]+a[<span class="number">3</span>]+a[<span class="number">4</span>]+a[<span class="number">5</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(a[<span class="number">2</span>]+a[<span class="number">3</span>]+a[<span class="number">4</span>]+a[<span class="number">5</span>]-a[<span class="number">1</span>])/<span class="number">2</span>+a[<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cometoj.com/contest/68/problem/C?problem_id=3935">C</a></p><p>前缀和，有几个已经开始的，减去彻底结束的，就是答案。</p><p>我一开始竟然用莫队，也是疯了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;v;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getid</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;<span class="keyword">return</span> lower_bound(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),cur)-v.<span class="built_in">begin</span>()+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="keyword">int</span> c[maxn&lt;&lt;<span class="number">3</span>][<span class="number">2</span>],a[maxn],b[maxn];</span><br><span class="line">ll pos[maxn],Ans;</span><br><span class="line">ll ans,n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,id;</span><br><span class="line">&#125;Q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(query a,query b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos[a.l]==pos[b.l])</span><br><span class="line">        <span class="keyword">return</span> a.r&lt;b.r;</span><br><span class="line">    <span class="keyword">return</span> pos[a.l]&lt;pos[b.l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">    a[i]=<span class="built_in">read</span>(),b[i]=<span class="built_in">read</span>();</span><br><span class="line">    v.push_back(a[i]),v.push_back(b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Q[i].l=<span class="built_in">read</span>();</span><br><span class="line">        Q[i].r=<span class="built_in">read</span>();</span><br><span class="line">        v.push_back(Q[i].l),v.push_back(Q[i].r);</span><br><span class="line">        Q[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">    v.erase(unique(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>()),v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)Q[i].l=getid(Q[i].l),Q[i].r=getid(Q[i].r);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)c[getid(b[i])][<span class="number">1</span>]++,c[getid(a[i])][<span class="number">0</span>]++;</span><br><span class="line">    <span class="keyword">int</span> R=v.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=R;++i)&#123;</span><br><span class="line">c[i][<span class="number">0</span>]+=c[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">c[i][<span class="number">1</span>]+=c[i<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">ans+=c[Q[i].r][<span class="number">0</span>]-c[Q[i].l<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cometoj.com/contest/68/problem/E?problem_id=3938">E</a></p><p>莫名的我看着就像一张无向图。</p><p>在一个关系图中，增加一个关系只能有几种可能：</p><ol><li>加在两个有奇数个朋友的中，有奇数个数的朋友-2。有奇数朋友的人的个数的奇偶性不变</li><li>加在一个有奇数朋友的人和一个有偶数朋友的人中，奇数变偶数，偶数变奇数。有奇数朋友的人的个数的奇偶性不变</li><li>加在两个有偶数朋友的人中，有奇数个数的朋友+2。有奇数朋友的人的个数的奇偶性不变</li></ol><p>由于一开始有奇数朋友的人的个数为0，所以最后一定是偶数，k是奇数时不可能的。</p><p>加关系是困难的，于是考虑在一个完全图中减边。</p><p>一条边如果利用的好，可以更改两个人的奇偶属性。完全图里，如果一开始每个人是奇数个好友，考虑删边变为偶数。反之亦然。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 01.10.2019 20:30:11       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">ll n,k;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">if</span>(k&gt;n||k%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"renrendoushijwj"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n&amp;<span class="number">1</span>)<span class="built_in">cout</span>&lt;&lt;n*(n<span class="number">-1</span>)/<span class="number">2</span>-k/<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;n*(n<span class="number">-1</span>)/<span class="number">2</span>-(n-k)/<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.cometoj.com/contest/68/problems&quot;&gt;Comet OJ - 2019国庆欢乐赛&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cometoj.com/contest/68/problem/A?problem_id=3933&quot;&gt;A&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果四边形右上角严格位于第一象限，那么第一象限必定有两部分。如果左上角严格位于第二象限，那么第二象限必定有两部分，同理可得。&lt;/p&gt;
    
    </summary>
    
    
      <category term="comet" scheme="https://blog.mysakure.com/categories/comet/"/>
    
    
      <category term="comet" scheme="https://blog.mysakure.com/tags/comet/"/>
    
      <category term="contest" scheme="https://blog.mysakure.com/tags/contest/"/>
    
  </entry>
  
  <entry>
    <title>Kamil and Making a Stream</title>
    <link href="https://blog.mysakure.com/2019/10/Kamil-and-Making-a-Stream/"/>
    <id>https://blog.mysakure.com/2019/10/Kamil-and-Making-a-Stream/</id>
    <published>2019-10-02T11:55:13.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1230/problem/E">https://codeforces.com/contest/1230/problem/E</a></p><p>一个区间的gcd最多有lg个</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 24.09.2019 12:20:34       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">using</span> info=<span class="built_in">map</span>&lt;ll,<span class="keyword">int</span>&gt;;</span><br><span class="line">ll n,a[maxn],id;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;g[maxn];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa,info cur)</span></span>&#123;</span><br><span class="line">ans+=a[u];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp;x:cur)&#123;</span><br><span class="line">ans+=__gcd(a[u],x.first)*x.second;</span><br><span class="line">ans%=mod;</span><br><span class="line">&#125;</span><br><span class="line">info nxt;</span><br><span class="line">nxt[a[u]]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp;x:cur)&#123;</span><br><span class="line">nxt[__gcd(a[u],x.first)]+=x.second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">int</span>(g[u].<span class="built_in">size</span>());++i)&#123;</span><br><span class="line"><span class="keyword">int</span> v=g[u][i];</span><br><span class="line"><span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u,nxt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">g[a].push_back(b);</span><br><span class="line">g[b].push_back(a);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">-1</span>,info());</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1230/problem/E&quot;&gt;https://codeforces.com/contest/1230/problem/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个区间的gcd最多有lg个&lt;/p&gt;
    
    </summary>
    
    
      <category term="区间gcd" scheme="https://blog.mysakure.com/categories/%E5%8C%BA%E9%97%B4gcd/"/>
    
    
      <category term="区间gcd" scheme="https://blog.mysakure.com/tags/%E5%8C%BA%E9%97%B4gcd/"/>
    
  </entry>
  
  <entry>
    <title>CF1228</title>
    <link href="https://blog.mysakure.com/2019/10/CF1228/"/>
    <id>https://blog.mysakure.com/2019/10/CF1228/</id>
    <published>2019-10-02T11:50:39.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1228">CF1228</a></p><a id="more"></a><ul><li><a href="https://codeforces.com/contest/1228/problem/A">Distinct Digits</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 30.09.2019 09:58:38       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">rep(i,<span class="number">0</span>,<span class="number">10</span>)a[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(u)&#123;</span><br><span class="line">a[u%<span class="number">10</span>]++;</span><br><span class="line">u/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">0</span>,<span class="number">9</span>)<span class="keyword">if</span>(a[i]&gt;=<span class="number">2</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">rep(i,l,r)&#123;</span><br><span class="line"><span class="keyword">if</span>(check(i))&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://codeforces.com/contest/1228/problem/B">Filling the Grid</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 30.09.2019 10:05:01       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> v[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],n,m;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">rep(i,<span class="number">1</span>,m)<span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">rep(j,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="keyword">if</span>(j&lt;=a[i]||i&lt;=b[j])v[i][j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(v[i][pos+<span class="number">1</span>]==<span class="number">1</span>)++pos;</span><br><span class="line"><span class="keyword">if</span>(pos!=a[i])&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(v[pos+<span class="number">1</span>][i]==<span class="number">1</span>)pos++;</span><br><span class="line"><span class="keyword">if</span>(pos!=b[i])&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;"debug "&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">// for(int i=1;i&lt;=n;++i)&#123;</span></span><br><span class="line"><span class="comment">// for(int j=1;j&lt;=m;++j)</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;v[i][j];</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=m;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;b[j]+<span class="number">1</span>&amp;&amp;j&gt;a[i]+<span class="number">1</span>)&#123;</span><br><span class="line">ans*=<span class="number">2</span>;</span><br><span class="line">ans%=mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://codeforces.com/contest/1228/problem/C">Primes and Multiplication</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 30.09.2019 10:34:09       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int unsigned long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">ll x,n;</span><br><span class="line"><span class="keyword">int</span> g[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">quickmod</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)<span class="comment">//用一个循环从右到左便利b的所有二进制位</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)<span class="comment">//判断此时b[i]的二进制位是否为1</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans = (ans*a)%m;<span class="comment">//乘到结果上，这里a是a^(2^i)%m</span></span><br><span class="line">            b--;<span class="comment">//把该为变0</span></span><br><span class="line">        &#125;</span><br><span class="line">        b/=<span class="number">2</span>;</span><br><span class="line">        a = a*a%m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> id=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(x)+<span class="number">0.5</span>;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(x%i==<span class="number">0</span>)g[++id]=i;</span><br><span class="line"><span class="keyword">while</span>(x%i==<span class="number">0</span>)x/=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x!=<span class="number">1</span>)g[++id]=x;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=id;++i)&#123;</span><br><span class="line">ll cur=g[i];</span><br><span class="line"><span class="keyword">while</span>(cur&lt;=n)&#123;</span><br><span class="line">ans*=quickmod(cur%mod,n/cur-(n/cur&lt;g[i]?<span class="number">0</span>:n/(cur*g[i])),mod);</span><br><span class="line">ans%=mod;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;"hehe "&lt;&lt;cur&lt;&lt;" "&lt;&lt;quickmod(cur,n/cur-(n/cur&lt;g[i]?0:n/(cur*g[i])),mod)&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//cerr&lt;&lt;"debug "&lt;&lt;cur&lt;&lt;" "&lt;&lt;ans&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(n/g[i]&lt;cur)<span class="keyword">break</span>;</span><br><span class="line">cur*=g[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><a href="https://codeforces.com/contest/1228/problem/D">Complete Tripartite</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 30.09.2019 09:56:07       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="built_in">set</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"><span class="keyword">int</span> l[<span class="number">3</span>*maxn],r[<span class="number">3</span>*maxn];</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">ll cnt[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">if</span>(m)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">l[++id]=x;</span><br><span class="line">r[id]=y;</span><br><span class="line">s.insert(mk(x,y));</span><br><span class="line">s.insert(mk(y,x));</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">2</span>,m)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">l[++id]=a;</span><br><span class="line">r[id]=b;</span><br><span class="line">s.insert(mk(a,b));</span><br><span class="line">s.insert(mk(b,a));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans[x]=<span class="number">1</span>,ans[y]=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">bool</span> flag1=s.count(mk(x,i));</span><br><span class="line"><span class="keyword">bool</span> flag2=s.count(mk(y,i));</span><br><span class="line"><span class="keyword">if</span>(flag1&amp;&amp;flag2)ans[i]=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag1)ans[i]=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> ans[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[l[i]]==ans[r[i]])&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cnt[ans[i]]++;</span><br><span class="line"><span class="keyword">if</span>(cnt[<span class="number">1</span>]*cnt[<span class="number">2</span>]+cnt[<span class="number">1</span>]*cnt[<span class="number">3</span>]+cnt[<span class="number">2</span>]*cnt[<span class="number">3</span>]!=m||!(cnt[<span class="number">1</span>]&amp;&amp;cnt[<span class="number">2</span>]&amp;&amp;cnt[<span class="number">3</span>]))&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1228&quot;&gt;CF1228&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CF1234</title>
    <link href="https://blog.mysakure.com/2019/10/CF1234/"/>
    <id>https://blog.mysakure.com/2019/10/CF1234/</id>
    <published>2019-10-02T11:42:49.000Z</published>
    <updated>2020-01-13T08:23:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CF1234"><a href="#CF1234" class="headerlink" title="CF1234"></a><a href="https://codeforces.com/contest/1234">CF1234</a></h2><a id="more"></a><ul><li><a href="https://codeforces.com/contest/1234/problem/A">A Equalize Prices Again</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 01.10.2019 22:44:47       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q,n,s,tmp;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">s+=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(s+n<span class="number">-1</span>)/n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://codeforces.com/contest/1234/problem/B1">B1 Social Network (easy version)</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 01.10.2019 22:54:49       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">int</span> n,k,l=<span class="keyword">int</span>(<span class="number">2e5</span>),r=<span class="keyword">int</span>(<span class="number">2e5</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line"><span class="keyword">if</span>(s.count(tmp))<span class="keyword">continue</span>;</span><br><span class="line">a[--l]=tmp;</span><br><span class="line">s.insert(tmp);</span><br><span class="line"><span class="keyword">if</span>(r-l&gt;k)s.erase(a[--r]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;r-l&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">rep(i,l,r<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://codeforces.com/contest/1234/problem/B2">B2 Social Network (hard version)</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 01.10.2019 22:54:49       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">int</span> n,k,l=<span class="keyword">int</span>(<span class="number">2e5</span>),r=<span class="keyword">int</span>(<span class="number">2e5</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line"><span class="keyword">if</span>(s.count(tmp))<span class="keyword">continue</span>;</span><br><span class="line">a[--l]=tmp;</span><br><span class="line">s.insert(tmp);</span><br><span class="line"><span class="keyword">if</span>(r-l&gt;k)s.erase(a[--r]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;r-l&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">rep(i,l,r<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://codeforces.com/contest/1234/problem/C">C Pipes</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 01.10.2019 23:02:20       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">3</span>][maxn],n;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> up)</span></span>&#123;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;"debug "&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;" "&lt;&lt;up&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>&amp;&amp;y==n)&#123;</span><br><span class="line"><span class="keyword">if</span>(up==n)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>][n]&gt;<span class="string">'2'</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a[<span class="number">0</span>][n]&lt;=<span class="string">'2'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(y==n+<span class="number">1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">dp[x][y]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[x][y]&lt;=<span class="string">'2'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> dfs(x,y+<span class="number">1</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(up==y)&#123;</span><br><span class="line"><span class="keyword">return</span> dfs(x,y+<span class="number">1</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dfs(!x,y,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">cin</span>&gt;&gt;a[<span class="number">1</span>][i];</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">cin</span>&gt;&gt;a[<span class="number">0</span>][i];</span><br><span class="line"><span class="keyword">if</span>(dfs(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>))<span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://codeforces.com/contest/1234/problem/D">D Distinct Characters Queries</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 01.10.2019 23:36:18       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> res[<span class="number">30</span>],ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">27</span>];</span><br><span class="line">node()&#123;</span><br><span class="line">rep(i,<span class="number">0</span>,<span class="number">16</span>)cnt[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">node t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n,pos,l,r,c,q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">rep(i,<span class="number">0</span>,<span class="number">26</span>)t[u].cnt[i]=t[u&lt;&lt;<span class="number">1</span>].cnt[i]+t[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].cnt[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">t[u].l=l,t[u].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">t[u].cnt[s[l<span class="number">-1</span>]-<span class="string">'a'</span>]++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">build(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">pushdown(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pos,<span class="keyword">char</span> aim)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=t[u].l,r=t[u].r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">rep(i,<span class="number">0</span>,<span class="number">26</span>)t[u].cnt[i]=<span class="number">0</span>;</span><br><span class="line">t[u].cnt[aim-<span class="string">'a'</span>]++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid)update(u&lt;&lt;<span class="number">1</span>,pos,aim);</span><br><span class="line"><span class="keyword">else</span> update(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos,aim);</span><br><span class="line">pushdown(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quere</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=t[u].l,r=t[u].r;</span><br><span class="line"><span class="keyword">if</span>(l==L&amp;&amp;R==r)&#123;</span><br><span class="line">rep(i,<span class="number">0</span>,<span class="number">26</span>)res[i]+=t[u].cnt[i];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(R&lt;=mid)quere(u&lt;&lt;<span class="number">1</span>,L,R);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)quere(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">quere(u&lt;&lt;<span class="number">1</span>,L,mid);</span><br><span class="line">quere(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,R);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="keyword">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="keyword">int</span> cmd;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;cmd;</span><br><span class="line"><span class="keyword">if</span>(cmd==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">char</span> aim;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;pos&gt;&gt;aim;</span><br><span class="line">update(<span class="number">1</span>,pos,aim);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;"debug"&lt;&lt;q&lt;&lt;endl;</span></span><br><span class="line">rep(i,<span class="number">0</span>,<span class="number">26</span>)res[i]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;"quere start"&lt;&lt;endl;</span></span><br><span class="line">quere(<span class="number">1</span>,l,r);</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">0</span>,<span class="number">26</span>)ans+=(res[i]!=<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://codeforces.com/contest/1234/problem/E">E Special Permutations</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 02.10.2019 10:26:36       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> q[maxn],ans,n,m,res[maxn],cnt[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> lazy,s;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">&#125;t[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">t[u].l=l,t[u].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">build(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">t[u&lt;&lt;<span class="number">1</span>].lazy+=t[u].lazy,t[u&lt;&lt;<span class="number">1</span>].s+=t[u].lazy;</span><br><span class="line">t[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy+=t[u].lazy,t[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].s+=t[u].lazy;</span><br><span class="line">t[u].lazy=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=t[u].l,r=t[u].r;</span><br><span class="line"><span class="keyword">if</span>(l==L&amp;&amp;r==R)&#123;</span><br><span class="line">t[u].s+=<span class="number">1</span>;</span><br><span class="line">t[u].lazy+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pushdown(u);</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(R&lt;=mid)update(u&lt;&lt;<span class="number">1</span>,L,R);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(L&gt;mid)update(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,L,R);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">update(u&lt;&lt;<span class="number">1</span>,L,mid);</span><br><span class="line">update(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,R);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=t[u].l,r=t[u].r;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> t[u].s;</span><br><span class="line">pushdown(u);</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=mid)<span class="keyword">return</span> query(u&lt;&lt;<span class="number">1</span>,pos);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">rep(i,<span class="number">1</span>,m)<span class="built_in">cin</span>&gt;&gt;q[i];</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)res[q[i]]+=<span class="built_in">abs</span>(q[i]-q[<span class="number">1</span>+i]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i==m)res[q[i]]+=<span class="built_in">abs</span>(q[i]-q[i<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">else</span> res[q[i]]+=<span class="built_in">abs</span>(q[i]-q[i+<span class="number">1</span>])+<span class="built_in">abs</span>(q[i]-q[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i]&gt;q[i<span class="number">-1</span>])cnt[q[i]]+=q[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(q[i]&lt;q[i<span class="number">-1</span>])cnt[q[i]]+=q[i<span class="number">-1</span>]<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(q[i]&gt;q[i+<span class="number">1</span>])cnt[q[i]]+=q[i+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(q[i]&lt;q[i+<span class="number">1</span>])cnt[q[i]]+=q[i+<span class="number">1</span>]<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">rep(i,<span class="number">2</span>,m)&#123;</span><br><span class="line">ans+=<span class="built_in">abs</span>(q[i]-q[i<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">min</span>(q[i],q[i<span class="number">-1</span>]),r=<span class="built_in">max</span>(q[i],q[i<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">if</span>(r-l&gt;<span class="number">1</span>)&#123;</span><br><span class="line">update(<span class="number">1</span>,l+<span class="number">1</span>,r<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">rep(i,<span class="number">2</span>,n)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=ans;</span><br><span class="line">tmp-=query(<span class="number">1</span>,i);</span><br><span class="line"><span class="comment">//cerr&lt;&lt;"debug "&lt;&lt;tmp&lt;&lt;" "&lt;&lt;res[i]&lt;&lt;" "&lt;&lt;cnt[i]&lt;&lt;endl;</span></span><br><span class="line">tmp-=res[i];</span><br><span class="line">tmp+=cnt[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;tmp&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CF1234&quot;&gt;&lt;a href=&quot;#CF1234&quot; class=&quot;headerlink&quot; title=&quot;CF1234&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codeforces.com/contest/1234&quot;&gt;CF1234&lt;/a&gt;&lt;/h2&gt;
    
    </summary>
    
    
      <category term="oj" scheme="https://blog.mysakure.com/categories/oj/"/>
    
      <category term="codeforces" scheme="https://blog.mysakure.com/categories/oj/codeforces/"/>
    
    
      <category term="codeforces" scheme="https://blog.mysakure.com/tags/codeforces/"/>
    
  </entry>
  
  <entry>
    <title>分组</title>
    <link href="https://blog.mysakure.com/2019/10/%E5%88%86%E7%BB%84/"/>
    <id>https://blog.mysakure.com/2019/10/%E5%88%86%E7%BB%84/</id>
    <published>2019-10-02T11:39:52.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a><a href="https://ac.nowcoder.com/acm/contest/199/A">分组</a></h2><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 200005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;a[M];<span class="comment">//链式结构存入数据 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,vis[M],col[M];<span class="comment">//vis为标记数组，col为0或1两个组的记录值 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cent=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a[x].<span class="built_in">size</span>();i++)<span class="comment">//遍历x全部认识的人 </span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!vis[a[x][i]])</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">vis[a[x][i]]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">col[a[x][i]]=!col[x];<span class="comment">//将x认识的人分到与之相反的组 </span></span><br><span class="line"></span><br><span class="line">dfs(a[x][i]);<span class="comment">//往下搜索 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(col[a[x][i]]==col[x])<span class="comment">//1.</span></span><br><span class="line"></span><br><span class="line">cent++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cent&gt;=<span class="number">2</span>)<span class="comment">//2.</span></span><br><span class="line"></span><br><span class="line">col[x]=!col[x];</span><br><span class="line"></span><br><span class="line"><span class="comment">//1和2是为了防止出现x认识的人都已经赋值了并且还是同一组超过1个，所以要将x分到另一组，递归往上更新 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(col,<span class="number">0</span>,<span class="keyword">sizeof</span>(col));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)<span class="comment">//链表结构存入a数组 </span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line"></span><br><span class="line">a[x].push_back(y);</span><br><span class="line"></span><br><span class="line">a[y].push_back(x);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//对没个点访问边，防止漏搜了 </span></span><br><span class="line"></span><br><span class="line">dfs(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,col[i]+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分组&quot;&gt;&lt;a href=&quot;#分组&quot; class=&quot;headerlink&quot; title=&quot;分组&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/199/A&quot;&gt;分组&lt;/a&gt;&lt;/h2&gt;
    
    </summary>
    
    
      <category term="思维" scheme="https://blog.mysakure.com/categories/%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="思维" scheme="https://blog.mysakure.com/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>字典序</title>
    <link href="https://blog.mysakure.com/2019/10/%E5%AD%97%E5%85%B8%E5%BA%8F/"/>
    <id>https://blog.mysakure.com/2019/10/%E5%AD%97%E5%85%B8%E5%BA%8F/</id>
    <published>2019-10-02T11:36:21.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字典序"><a href="#字典序" class="headerlink" title="字典序"></a><a href="https://ac.nowcoder.com/acm/contest/1099/G">字典序</a></h2><p>我们容易想到一个n^3的贪心：每次找到最小的可以放进来的第j列，同时记录当前连续的依然相等的行。第j列可以放进来的条件为：对于当前每一个依然相等的连续行(i,i+1)(i,i+1)(i,i+1)，有C[i][j]&lt;=C[i+1][j]C[i][j] &lt;= C[i+1][j]C[i][j]&lt;=C[i+1][j]。<br>一共要找m次列，每次找列是枚举m个列，而检查列是否符合条件需要检查当前所有依然相等的连续行，最差情况下要检查n次。总的复杂度O(m2n)O(m^2n)O(m<br>2<br> n)，肯定是不行的。考虑优化其中的一个步骤。</p><a id="more"></a><p>想到优化检查这一步，不是暴力检查，而是用cnt[j]cnt[j]cnt[j]记录第jjj列有多少行满足（C[i][j]&gt;C[i+1][j]）（C[i][j] &gt; C[i+1][j]）（C[i][j]&gt;C[i+1][j]）。如果为0，则表示这一列可以加入。这样把检查优化到了O(1)，但是每一次加入一列之后要去更新其他没加入的列的cntcntcnt。<br>什么情况下一列的cnt会减少？也就是什么情况下对于还没放入的第j列，(C[i][j]&gt;C[i+1][j])(C[i][j] &gt; C[i+1][j])(C[i][j]&gt;C[i+1][j])的影响被消除？<br>只要前面放入的列中，有一列k满足(C[i][k]&lt;C[i+1][k])(C[i][k]&lt;C[i+1][k])(C[i][k]&lt;C[i+1][k]),那么(C[i][j]&gt;C[i+1][j])(C[i][j] &gt; C[i+1][j])(C[i][j]&gt;C[i+1][j])对于第j列的影响就被消除了。<br>记录当前依然相等的连续行，加入新的一列j时，如果第j列可以把某连续行(i,i+1)分开（也就是C[i][j]&lt;C[i+1][j])，那么就更新剩余列的cnt。因为只更新连续行，最多更新n次（一共就n行，每更新一次最少会少1个连续行），更新一次的复杂度是O(m)。<br>总的复杂度为O(m2+nm)O(m^2+nm)O(m<br>2<br> +nm)<br>————————————————<br>版权声明：本文为CSDN博主「_ 泛白」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_43202683/article/details/100170570">https://blog.csdn.net/qq_43202683/article/details/100170570</a></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e3</span> + <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> c[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> cnt[maxn];<span class="comment">// 有多少个不符合条件的</span></span><br><span class="line"><span class="keyword">int</span> dif[maxn];<span class="comment">//dif[i]=1 表示第i行和i+1行已经不相等了</span></span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(cnt, <span class="number">0</span>, (m+<span class="number">1</span>)&lt;&lt;<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, (m+<span class="number">1</span>)&lt;&lt;<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">memset</span>(dif, <span class="number">0</span>, (n+<span class="number">1</span>)&lt;&lt;<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m ;++j)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c[i][j]);</span><br><span class="line">            <span class="keyword">if</span>(i!=<span class="number">1</span>)&#123;</span><br><span class="line">                cnt[j] += (c[i<span class="number">-1</span>][j] &gt; c[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sol</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ans.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">while</span>(ans.<span class="built_in">size</span>() &lt; m)&#123;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= m; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j] || cnt[j] &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j &gt; m)&#123;<span class="comment">//没找到</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>); <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.push_back(j);</span><br><span class="line">        vis[j] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dif[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(c[i][j] &gt;= c[i+<span class="number">1</span>][j]) <span class="keyword">continue</span>;</span><br><span class="line">            dif[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; ++k)&#123;</span><br><span class="line">                <span class="keyword">if</span>(c[i][k] &gt; c[i+<span class="number">1</span>][k]) cnt[k]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i]);</span><br><span class="line">    &#125;<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m)!=EOF)&#123;</span><br><span class="line">        init();sol();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字典序&quot;&gt;&lt;a href=&quot;#字典序&quot; class=&quot;headerlink&quot; title=&quot;字典序&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/1099/G&quot;&gt;字典序&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我们容易想到一个n^3的贪心：每次找到最小的可以放进来的第j列，同时记录当前连续的依然相等的行。第j列可以放进来的条件为：对于当前每一个依然相等的连续行(i,i+1)(i,i+1)(i,i+1)，有C[i][j]&amp;lt;=C[i+1][j]C[i][j] &amp;lt;= C[i+1][j]C[i][j]&amp;lt;=C[i+1][j]。&lt;br&gt;一共要找m次列，每次找列是枚举m个列，而检查列是否符合条件需要检查当前所有依然相等的连续行，最差情况下要检查n次。总的复杂度O(m2n)O(m^2n)O(m&lt;br&gt;2&lt;br&gt; n)，肯定是不行的。考虑优化其中的一个步骤。&lt;/p&gt;
    
    </summary>
    
    
      <category term="思维" scheme="https://blog.mysakure.com/categories/%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="思维" scheme="https://blog.mysakure.com/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Forest Program</title>
    <link href="https://blog.mysakure.com/2019/09/Forest-Program/"/>
    <id>https://blog.mysakure.com/2019/09/Forest-Program/</id>
    <published>2019-09-28T13:10:28.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Forest-Program"><a href="#Forest-Program" class="headerlink" title="Forest Program"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6736">Forest Program</a></h2><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 28.09.2019 12:23:13       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> vis[maxn],sz[maxn],dep[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;g[maxn];</span><br><span class="line">ll num=<span class="number">0</span>,cur=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sgn = <span class="number">1</span>; <span class="keyword">int</span> cnt = <span class="number">0</span>;   <span class="comment">//sgn表示正负号 cnt表示读取的数字</span></span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;      <span class="comment">//读取非数字的字符，保留负号，忽略其余无关符号</span></span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">'-'</span>)</span><br><span class="line">            sgn = -sgn;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">        cnt = cnt*<span class="number">10</span> + (ch-<span class="string">'0'</span>);</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  sgn*cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">quickmod</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)<span class="comment">//用一个循环从右到左便利b的所有二进制位</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)<span class="comment">//判断此时b[i]的二进制位是否为1</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans = (ans*a)%m;<span class="comment">//乘到结果上，这里a是a^(2^i)%m</span></span><br><span class="line">            b--;<span class="comment">//把该为变0</span></span><br><span class="line">        &#125;</span><br><span class="line">        b/=<span class="number">2</span>;</span><br><span class="line">        a = a*a%m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa,<span class="keyword">int</span> deep)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[u]==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(vis[u]==<span class="number">-1</span>)&#123;</span><br><span class="line">cur*=(quickmod(<span class="number">2</span>,deep-dep[u],mod)<span class="number">-1</span>);</span><br><span class="line">cur%=mod;</span><br><span class="line">num+=deep-dep[u];</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">vis[u]=<span class="number">-1</span>;</span><br><span class="line">dep[u]=deep;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">signed</span>(g[u].<span class="built_in">size</span>());++i)&#123;</span><br><span class="line"><span class="keyword">int</span> v=g[u][i];</span><br><span class="line"><span class="keyword">if</span>(v==fa)<span class="keyword">continue</span>;</span><br><span class="line">sz[u]+=dfs(v,u,deep+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> sz[u]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">rep(i,<span class="number">1</span>,n)vis[i]=sz[i]=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n)g[i].<span class="built_in">clear</span>();</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;u);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v);</span><br><span class="line">g[u].push_back(v);</span><br><span class="line">g[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i])<span class="keyword">continue</span>;</span><br><span class="line">cur=<span class="number">1</span>,num=<span class="number">0</span>;</span><br><span class="line">dfs(i,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">cur*=quickmod(<span class="number">2</span>,sz[i]-num,mod)%mod;</span><br><span class="line">ans*=cur;</span><br><span class="line">ans%=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Forest-Program&quot;&gt;&lt;a href=&quot;#Forest-Program&quot; class=&quot;headerlink&quot; title=&quot;Forest Program&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6736&quot;&gt;Forest Program&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;Code&quot;&gt;&lt;a href=&quot;#Code&quot; class=&quot;headerlink&quot; title=&quot;Code:&quot;&gt;&lt;/a&gt;Code:&lt;/h2&gt;
    
    </summary>
    
    
      <category term="无向图求环" scheme="https://blog.mysakure.com/categories/%E6%97%A0%E5%90%91%E5%9B%BE%E6%B1%82%E7%8E%AF/"/>
    
    
      <category term="无向图求环" scheme="https://blog.mysakure.com/tags/%E6%97%A0%E5%90%91%E5%9B%BE%E6%B1%82%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>小doge的快乐阳光跑</title>
    <link href="https://blog.mysakure.com/2019/09/%E5%B0%8Fdoge%E7%9A%84%E5%BF%AB%E4%B9%90%E9%98%B3%E5%85%89%E8%B7%91/"/>
    <id>https://blog.mysakure.com/2019/09/%E5%B0%8Fdoge%E7%9A%84%E5%BF%AB%E4%B9%90%E9%98%B3%E5%85%89%E8%B7%91/</id>
    <published>2019-09-28T12:49:48.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小doge的快乐阳光跑"><a href="#小doge的快乐阳光跑" class="headerlink" title="小doge的快乐阳光跑"></a><a href="https://ac.nowcoder.com/acm/contest/1090/B">小doge的快乐阳光跑</a></h2><p>作者：四糸智乃<br><a href="https://www.nowcoder.com/discuss/287870?type=all&amp;order=time&amp;pos=&amp;page=1来源：牛客网">https://www.nowcoder.com/discuss/287870?type=all&amp;order=time&amp;pos=&amp;page=1来源：牛客网</a></p><h2 id="10pts"><a href="#10pts" class="headerlink" title="10pts"></a>10pts</h2><p>  使用了floyd求最短路emmm….除非n&lt;=300，不然还是别轻易用floyd了。 </p><h2 id="特殊测试点信息："><a href="#特殊测试点信息：" class="headerlink" title="特殊测试点信息："></a>特殊测试点信息：</h2><p>  对于测试点1,4,5，只要最短路求的是对的即可AC，如果这几个测试点通过而其他WA掉考虑是DP部分写错了。 </p><p>  对于测试点2,3。可以枚举路过序列的全排（dfs一下）瞎搞搞。 </p><p>  对于测试点6,7,10，这三个点的答案大于1e9，请注意是否使用long long或者inf是否足够大。 </p><p>  对于测试点6，是可以枚举一下在哪里拐弯来特判掉的。 </p><a id="more"></a><h2 id="100pts"><a href="#100pts" class="headerlink" title="100pts"></a>100pts</h2><p>  首先肯定要预处理一波最短路，由于图是相对比较稀疏的稀疏图，所以其实spfa或者dij区别不太大（n太小了，故意卡spfa效果并不好）但是注意一下啊，现在spfa人人喊打，尽量少用或者别用。 </p><p>  对于a和b中的点，预处理这些点为起点的最短路。 </p><p>  然后接下来就是一个非常简单的dp，dp[i][j][01]表示已经完成了第一个人的i个点位和第二个人的第j个点位，低三个维度的0表示最后停在了第一个人的点位，1表示最后停在了第二个人的点位。 </p><p>  然后转移方程如下： </p><p>  dp[i + 1][j][0] = min(dp[i + 1][j][0], dp[i][j][0] + dis[a][i][a[i + 1]]); </p><p>  dp[i + 1][j][0] = min(dp[i + 1][j][0], dp[i][j][1] + dis[b[j]][a[i + 1]]); </p><p>  dp[i][j + 1][1] = min(dp[i][j + 1][1], dp[i][j][1] + dis[b[j]][b[j + 1]]); </p><p>  dp[i][j + 1][1] = min(dp[i][j + 1][1], dp[i][j][0] + dis[a[i]][b[j + 1]]);</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 27.09.2019 18:42:04       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> self[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> from,to,dist;</span><br><span class="line">    Edge(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> d):from(u),to(v),dist(d)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HeapNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> d,u;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> HeapNode&amp; rhs)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rhs.d&lt;d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> d[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">110</span>][<span class="number">110</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> a,sa[<span class="number">110</span>],b,sb[<span class="number">110</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dijkstra</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Edge&gt;edges;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;G[maxn];</span><br><span class="line">    <span class="keyword">bool</span> flag[maxn];</span><br><span class="line">   <span class="comment">//注意结构体内部开数组内存不能太大</span></span><br><span class="line">    <span class="comment">//此时将int改为ll会出现内存过大的问题</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n=n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)G[i].<span class="built_in">clear</span>();</span><br><span class="line">        edges.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddEgde</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> dist)</span></span>&#123;</span><br><span class="line">        edges.push_back(Edge(from,to,dist));</span><br><span class="line">        m=edges.<span class="built_in">size</span>();</span><br><span class="line">        G[from].push_back(m<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">        priority_queue&lt;HeapNode&gt;Q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)d[s][i]=inf;</span><br><span class="line">        d[s][s]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(flag,<span class="number">0</span>,<span class="keyword">sizeof</span>(flag));</span><br><span class="line">        Q.push((HeapNode)&#123;<span class="number">0</span>,s&#125;);</span><br><span class="line">        <span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line">            HeapNode x=Q.top();Q.pop();</span><br><span class="line">            <span class="keyword">int</span> u=x.u;</span><br><span class="line">            <span class="keyword">if</span>(flag[u])<span class="keyword">continue</span>;</span><br><span class="line">            flag[u]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">signed</span>(G[u].<span class="built_in">size</span>());i++)&#123;</span><br><span class="line">                Edge&amp; e=edges[G[u][i]];</span><br><span class="line">                <span class="keyword">if</span>(d[s][e.to]&gt;d[s][u]+e.dist)&#123;</span><br><span class="line">                    d[s][e.to]=d[s][u]+e.dist;</span><br><span class="line">                    Q.push((HeapNode)&#123;d[s][e.to],e.to&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Dijkstra dij;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="comment">//if(x==y)return self[x];</span></span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>||y==<span class="number">0</span>)<span class="keyword">return</span> inf;</span><br><span class="line"><span class="keyword">if</span>(d[x][y]||d[y][x])<span class="keyword">return</span> d[x][y]?d[x][y]:d[y][x];</span><br><span class="line">dij.dijkstra(x);</span><br><span class="line"><span class="keyword">return</span> d[x][y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">dij.n=n;</span><br><span class="line">rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">dij.AddEgde(u,v,w);</span><br><span class="line">dij.AddEgde(v,u,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">rep(i,<span class="number">1</span>,a)<span class="built_in">cin</span>&gt;&gt;sa[i];</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">rep(i,<span class="number">1</span>,b)<span class="built_in">cin</span>&gt;&gt;sb[i];</span><br><span class="line">rep(i,<span class="number">0</span>,a)</span><br><span class="line">rep(j,<span class="number">0</span>,b)</span><br><span class="line">dp[i][j][<span class="number">0</span>]=dp[i][j][<span class="number">1</span>]=inf;</span><br><span class="line"><span class="keyword">if</span>(a)dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(b)dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">0</span>,a)&#123;</span><br><span class="line">rep(j,<span class="number">0</span>,b)&#123;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">0</span>&amp;&amp;b==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//if(sa[i]==sb[j]&amp;&amp;i)dp[i][j][1]=dp[i][j][0]=dp[i-1][j][1];</span></span><br><span class="line"><span class="keyword">if</span>(sa[i]==sb[j])&#123;</span><br><span class="line">dp[i][j][<span class="number">0</span>]=<span class="built_in">min</span>(dp[i][j][<span class="number">0</span>],dp[i<span class="number">-1</span>][j][<span class="number">1</span>]);</span><br><span class="line">dp[i][j][<span class="number">0</span>]=<span class="built_in">min</span>(dp[i][j][<span class="number">0</span>],dp[i][j<span class="number">-1</span>][<span class="number">0</span>]);</span><br><span class="line">dp[i][j][<span class="number">0</span>]=<span class="built_in">min</span>(dp[i][j][<span class="number">1</span>],dp[i][j][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">dp[i][j][<span class="number">1</span>]=dp[i][j][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i)&#123;</span><br><span class="line">dp[i][j][<span class="number">0</span>]=<span class="built_in">min</span>(dp[i][j][<span class="number">0</span>],dp[i<span class="number">-1</span>][j][<span class="number">1</span>]+getdis(sb[j],sa[i]));</span><br><span class="line">dp[i][j][<span class="number">0</span>]=<span class="built_in">min</span>(dp[i][j][<span class="number">0</span>],dp[i<span class="number">-1</span>][j][<span class="number">0</span>]+getdis(sa[i<span class="number">-1</span>],sa[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j)&#123;</span><br><span class="line">dp[i][j][<span class="number">1</span>]=<span class="built_in">min</span>(dp[i][j][<span class="number">1</span>],dp[i][j<span class="number">-1</span>][<span class="number">1</span>]+getdis(sb[j],sb[j<span class="number">-1</span>]));</span><br><span class="line">dp[i][j][<span class="number">1</span>]=<span class="built_in">min</span>(dp[i][j][<span class="number">1</span>],dp[i][j<span class="number">-1</span>][<span class="number">0</span>]+getdis(sa[i],sb[j]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">min</span>(dp[a][b][<span class="number">0</span>],dp[a][b][<span class="number">1</span>])&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;小doge的快乐阳光跑&quot;&gt;&lt;a href=&quot;#小doge的快乐阳光跑&quot; class=&quot;headerlink&quot; title=&quot;小doge的快乐阳光跑&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/1090/B&quot;&gt;小doge的快乐阳光跑&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者：四糸智乃&lt;br&gt;&lt;a href=&quot;https://www.nowcoder.com/discuss/287870?type=all&amp;amp;order=time&amp;amp;pos=&amp;amp;page=1来源：牛客网&quot;&gt;https://www.nowcoder.com/discuss/287870?type=all&amp;amp;order=time&amp;amp;pos=&amp;amp;page=1来源：牛客网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;10pts&quot;&gt;&lt;a href=&quot;#10pts&quot; class=&quot;headerlink&quot; title=&quot;10pts&quot;&gt;&lt;/a&gt;10pts&lt;/h2&gt;&lt;p&gt;  使用了floyd求最短路emmm….除非n&amp;lt;=300，不然还是别轻易用floyd了。 &lt;/p&gt;
&lt;h2 id=&quot;特殊测试点信息：&quot;&gt;&lt;a href=&quot;#特殊测试点信息：&quot; class=&quot;headerlink&quot; title=&quot;特殊测试点信息：&quot;&gt;&lt;/a&gt;特殊测试点信息：&lt;/h2&gt;&lt;p&gt;  对于测试点1,4,5，只要最短路求的是对的即可AC，如果这几个测试点通过而其他WA掉考虑是DP部分写错了。 &lt;/p&gt;
&lt;p&gt;  对于测试点2,3。可以枚举路过序列的全排（dfs一下）瞎搞搞。 &lt;/p&gt;
&lt;p&gt;  对于测试点6,7,10，这三个点的答案大于1e9，请注意是否使用long long或者inf是否足够大。 &lt;/p&gt;
&lt;p&gt;  对于测试点6，是可以枚举一下在哪里拐弯来特判掉的。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="动态规划" scheme="https://blog.mysakure.com/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="动态规划" scheme="https://blog.mysakure.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>小w的进制转换</title>
    <link href="https://blog.mysakure.com/2019/09/%E5%B0%8Fw%E7%9A%84%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    <id>https://blog.mysakure.com/2019/09/%E5%B0%8Fw%E7%9A%84%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</id>
    <published>2019-09-28T12:47:51.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小w的进制转换"><a href="#小w的进制转换" class="headerlink" title="小w的进制转换"></a><a href="https://ac.nowcoder.com/acm/contest/1090/A">小w的进制转换</a></h2><p>作者：四糸智乃<br><a href="https://www.nowcoder.com/discuss/287870?type=all&amp;order=time&amp;pos=&amp;page=1来源：牛客网">https://www.nowcoder.com/discuss/287870?type=all&amp;order=time&amp;pos=&amp;page=1来源：牛客网</a></p><p>  题意：问从1到n有多少个数字在二进制表示下是“反对称01串”，反对称意为对称相反。 </p><a id="more"></a><h2 id="10pts"><a href="#10pts" class="headerlink" title="10pts"></a>10pts</h2><p>  能过样例就是10pts </p><h2 id="30pts"><a href="#30pts" class="headerlink" title="30pts"></a>30pts</h2><p>  写了个大暴力，每次输入n都暴力求 </p><h2 id="60pts"><a href="#60pts" class="headerlink" title="60pts"></a>60pts</h2><p>  暴力打了一张1~100000的表，预处理输入直接输出 </p><h2 id="100pts"><a href="#100pts" class="headerlink" title="100pts"></a>100pts</h2><p>  显然的是，如果一个数字二进制表示的字符串长度为奇数，一定不符合条件。 </p><p>  我们观察一下前几个符合条件的数字，既然题目与二进制有关，不妨换个视角 </p><p>  10 </p><p>  1010 </p><p>  1100 </p><p>  100110 </p><p>  101010 </p><p>  110100 </p><p>  111000 </p><p>  看出来了嘛？没看出来，没关系，我们把这些数字切一半 </p><p>  1 </p><p>  10 </p><p>  11 </p><p>  100 </p><p>  101 </p><p>  110 </p><p>  111 </p><p>  转换成对应的十进制就是1,2,3,4,5,6,7… </p><p>  其实很好理解，因为“反对称”嘛就如同回文数一样，前半决定后半。第k个符合条件的数在二进制表示下就是KK’，K表示k的二进制表示字符串,K’为反对称串，可以用位运算O(1)构造。有个这个性质之后，你既可以找规律统计，又可以二分一个最大的k使得KK’小于给定的n，则此时的k就为答案。 </p><p>  std使用的是直接按位构造的方式。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 27.09.2019 18:04:44       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull  long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">ull n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(ull n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> inx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n)&#123;</span><br><span class="line">++inx;</span><br><span class="line">n/=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> inx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> inx=<span class="built_in">get</span>(n);</span><br><span class="line">ll ans=(<span class="number">1l</span>l&lt;&lt;(inx/<span class="number">2</span>))<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(inx&amp;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans=n/(<span class="number">1l</span>l&lt;&lt;(inx/<span class="number">2</span>));</span><br><span class="line">ll cur=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=inx/<span class="number">2</span>;i&lt;inx;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(!(n&amp;(<span class="number">1l</span>l&lt;&lt;i)))cur+=(<span class="number">1l</span>l&lt;&lt;(inx-i<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n%(<span class="number">1l</span>l&lt;&lt;(inx/<span class="number">2</span>))&lt;cur)ans--;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;小w的进制转换&quot;&gt;&lt;a href=&quot;#小w的进制转换&quot; class=&quot;headerlink&quot; title=&quot;小w的进制转换&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/1090/A&quot;&gt;小w的进制转换&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作者：四糸智乃&lt;br&gt;&lt;a href=&quot;https://www.nowcoder.com/discuss/287870?type=all&amp;amp;order=time&amp;amp;pos=&amp;amp;page=1来源：牛客网&quot;&gt;https://www.nowcoder.com/discuss/287870?type=all&amp;amp;order=time&amp;amp;pos=&amp;amp;page=1来源：牛客网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  题意：问从1到n有多少个数字在二进制表示下是“反对称01串”，反对称意为对称相反。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="思维" scheme="https://blog.mysakure.com/categories/%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="思维" scheme="https://blog.mysakure.com/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>WonderTeam</title>
    <link href="https://blog.mysakure.com/2019/09/WonderTeam/"/>
    <id>https://blog.mysakure.com/2019/09/WonderTeam/</id>
    <published>2019-09-27T04:06:22.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WonderTeam"><a href="#WonderTeam" class="headerlink" title="WonderTeam"></a><a href="https://vjudge.net/problem/UVALive-4094">WonderTeam</a></h2><blockquote><p>最近的贪心我就没有做出来的，一开始这道题想的是让这支队伍赢得次数很多，因为他需要最多的赢得次数。但是实际上，它不需要赢得次数很多，它只需要比其他队伍多就好。emmmm</p></blockquote><p><strong>题目大意：</strong></p><a id="more"></a><p>有n支队伍，每两支队伍打两场比赛(主客场各一次)，胜得3分，平得1分，输不得分，比赛结束之后会评选出一个梦之队，梦之队满足以下条件：进球总数最多，胜利场数最多，丢求总数最少，三个都不能并列，求梦之队的最低排名</p><p><strong>解析来自：<a href="https://blog.csdn.net/l123012013048/article/details/44001543">https://blog.csdn.net/l123012013048/article/details/44001543</a></strong></p><p><strong>分析</strong></p><p>1.让梦之队的胜利场的进球总数达到无穷大(当然这是不可能的)，输的场都是进0球对方队伍进1球，平的场都是0:0的得分，这样即使梦之队只赢一场也能达到进球总数最多了，其他队伍的平局的时候就让其丢求数大于梦之队的总丢球数，这样梦之队的丢球总数就是最少了</p><p>2.胜利场数最多，胜利场的得分是3分，要让梦之队的排名尽量低的话，胜利场数就不能太多，输的场数让其多一点</p><h2 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> n;  </span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) == <span class="number">1</span> &amp;&amp; n ) &#123;  </span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">3</span>)  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"1\n"</span>);  </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">4</span>)  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"2\n"</span>);  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;WonderTeam&quot;&gt;&lt;a href=&quot;#WonderTeam&quot; class=&quot;headerlink&quot; title=&quot;WonderTeam&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://vjudge.net/problem/UVALive-4094&quot;&gt;WonderTeam&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近的贪心我就没有做出来的，一开始这道题想的是让这支队伍赢得次数很多，因为他需要最多的赢得次数。但是实际上，它不需要赢得次数很多，它只需要比其他队伍多就好。emmmm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;题目大意：&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="贪心" scheme="https://blog.mysakure.com/categories/%E8%B4%AA%E5%BF%83/"/>
    
    
      <category term="贪心" scheme="https://blog.mysakure.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>The Bus Driver Problem</title>
    <link href="https://blog.mysakure.com/2019/09/The%20Bus%20Driver%20Problem/"/>
    <id>https://blog.mysakure.com/2019/09/The%20Bus%20Driver%20Problem/</id>
    <published>2019-09-26T09:06:22.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-Bus-Driver-Problem"><a href="#The-Bus-Driver-Problem" class="headerlink" title="The Bus Driver Problem"></a><a href="https://vjudge.net/problem/UVA-11389">The Bus Driver Problem</a></h2><p>感觉整个人都很傻逼，想复杂了。没想到是个简单的贪心，emmmm</p><a id="more"></a><h2 id="code："><a href="#code：" class="headerlink" title="code："></a>code：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 26.09.2019 18:31:13       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">110</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],n,ans,d,r;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;d&gt;&gt;r&amp;&amp;n)&#123;</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">rep(i,<span class="number">1</span>,n)<span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line">sort(b+<span class="number">1</span>,b+<span class="number">1</span>+n);</span><br><span class="line">reverse(b+<span class="number">1</span>,b+<span class="number">1</span>+n);</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">ans+=<span class="built_in">max</span>(<span class="number">0</span>,a[i]+b[i]-d)*r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;The-Bus-Driver-Problem&quot;&gt;&lt;a href=&quot;#The-Bus-Driver-Problem&quot; class=&quot;headerlink&quot; title=&quot;The Bus Driver Problem&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://vjudge.net/problem/UVA-11389&quot;&gt;The Bus Driver Problem&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;感觉整个人都很傻逼，想复杂了。没想到是个简单的贪心，emmmm&lt;/p&gt;
    
    </summary>
    
    
      <category term="贪心" scheme="https://blog.mysakure.com/categories/%E8%B4%AA%E5%BF%83/"/>
    
    
      <category term="贪心" scheme="https://blog.mysakure.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Travel</title>
    <link href="https://blog.mysakure.com/2019/09/Travel/"/>
    <id>https://blog.mysakure.com/2019/09/Travel/</id>
    <published>2019-09-26T09:06:22.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Travel"><a href="#Travel" class="headerlink" title="Travel"></a><a href="https://ac.nowcoder.com/acm/contest/17/B">Travel</a></h2><blockquote><p>这道题告诉我，最短路不要想当然的瞎去松弛，会把复杂度搞大，要使用科学的最短路松弛方法。不然就一直T</p></blockquote><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 26.09.2019 18:54:16      </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll unsigned long long</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> ll maxn=<span class="number">1e5</span>,inf=<span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],n,m,q,x,y;</span><br><span class="line">ll d[maxn],ans,vis[maxn],v[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    ll w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt;g[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">getdis</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)swap(x,y);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(d[y<span class="number">-1</span>]-d[x<span class="number">-1</span>],d[n]-(d[y<span class="number">-1</span>]-d[x<span class="number">-1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ue[<span class="number">30</span>],ve[<span class="number">30</span>];</span><br><span class="line">ll we[<span class="number">30</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">    vis[ue[i]]=getdis(ue[i],x);</span><br><span class="line">    vis[ve[i]]=getdis(ve[i],x);</span><br><span class="line">    &#125;</span><br><span class="line">    vis[y]=getdis(x,y);</span><br><span class="line">    vis[<span class="number">0</span>]=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*m;++i)&#123;</span><br><span class="line">    <span class="keyword">int</span> start=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[start]&gt;vis[ue[i]]&amp;&amp;!v[ue[i]])start=ue[i];</span><br><span class="line">    <span class="keyword">if</span>(vis[start]&gt;vis[ve[i]]&amp;&amp;!v[ve[i]])start=ve[i];</span><br><span class="line">    &#125;</span><br><span class="line">    v[start]=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cerr&lt;&lt;"debug "&lt;&lt;start&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">    vis[ue[i]]=<span class="built_in">min</span>(vis[ue[i]],vis[start]+getdis(ue[i],start));</span><br><span class="line">    vis[ve[i]]=<span class="built_in">min</span>(vis[ve[i]],vis[start]+getdis(ve[i],start));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">int</span>(g[start].<span class="built_in">size</span>());++i)&#123;</span><br><span class="line">    <span class="keyword">int</span> to=g[start][i].to,w=g[start][i].w;</span><br><span class="line">    vis[to]=<span class="built_in">min</span>(vis[to],vis[start]+w);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">    ans=<span class="built_in">min</span>(ans,getdis(y,ue[i])+vis[ue[i]]);</span><br><span class="line">    ans=<span class="built_in">min</span>(ans,getdis(y,ve[i])+vis[ve[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    rep(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;d[i];</span><br><span class="line">        d[i]+=d[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;ue[i]&gt;&gt;ve[i]&gt;&gt;we[i];</span><br><span class="line">        g[ue[i]].push_back(edge&#123;ve[i],we[i]&#125;);</span><br><span class="line">        g[ve[i]].push_back(edge&#123;ue[i],we[i]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;y)swap(x,y);</span><br><span class="line">        rep(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">            vis[ue[i]]=inf,vis[ve[i]]=inf;</span><br><span class="line">            v[ue[i]]=<span class="number">0</span>;v[ve[i]]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[x]=<span class="number">0</span>;</span><br><span class="line">        ans=getdis(x,y);</span><br><span class="line">        solve();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Travel&quot;&gt;&lt;a href=&quot;#Travel&quot; class=&quot;headerlink&quot; title=&quot;Travel&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/17/B&quot;&gt;Travel&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这道题告诉我，最短路不要想当然的瞎去松弛，会把复杂度搞大，要使用科学的最短路松弛方法。不然就一直T&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="最短路" scheme="https://blog.mysakure.com/categories/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    
      <category term="最短路" scheme="https://blog.mysakure.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>MMSet2</title>
    <link href="https://blog.mysakure.com/2019/09/MMSet2/"/>
    <id>https://blog.mysakure.com/2019/09/MMSet2/</id>
    <published>2019-09-25T09:06:22.000Z</published>
    <updated>2020-01-13T07:54:00.295Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://ac.nowcoder.com/acm/contest/15/C来源：牛客网">https://ac.nowcoder.com/acm/contest/15/C来源：牛客网</a></p><p> 时间限制：C/C++ 3秒，其他语言6秒<br> 空间限制：C/C++ 131072K，其他语言262144K<br>  64bit IO Format: %lld</p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>  给定一棵n个节点的树，点编号为1…n。 </p><p>  Q次询问，每次询问给定一个点集S，令<img src="https://uploadfiles.nowcoder.com/images/20171010/301743_1507616278672_C6D0E0775711A8F3AC6AD0B83F91A3F1" alt="img">， </p><p>  你需要求出<img src="https://uploadfiles.nowcoder.com/images/20171010/301743_1507616308324_65BEBFC097FD87FEB504978B5E490670" alt="img">。 </p><p>  其中dist(u,v)表示树上路径(u,v)的边数。 </p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一行一个整数n，接下来n−1行每行两个整数表示树上的一条边。接下来一行一个整数Q，接着Q行，每行第一个数是|S|，剩下|S|个互不相同的数代表这个集合。</span><br></pre></td></tr></table></figure><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出Q行，每行一个整数表示答案。</span><br></pre></td></tr></table></figure><p> 示例1 </p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1</span><br><span class="line">2 2 3</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p><a href="javascript:void(0);">复制</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="备注"><a href="#备注" class="headerlink" title="备注:"></a>备注:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n≤3×105,|S|≥1,∑|S|≤106</span><br></pre></td></tr></table></figure><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>作者：王阿清<br><a href="https://www.nowcoder.com/discuss/148402?type=post&amp;order=time&amp;pos=&amp;page=0来源：牛客网">https://www.nowcoder.com/discuss/148402?type=post&amp;order=time&amp;pos=&amp;page=0来源：牛客网</a></p><pre><code>不难发现答案就是 ![img](https://uploadfiles.nowcoder.com/images/20181218/8030387_1545100078791_BBDA6409747C3825F23430B502E55CE2)。</code></pre><p> 证明可以这样考虑：<br> 二分答案d,判断是否存在一个点u，使得 f(u)≤d。也就是<img src="https://uploadfiles.nowcoder.com/images/20181218/8030387_1545100757183_7ADDB635C59624AB09BDF1758334CE50" alt="img">。即以S中的每个点为圆心，画一个半径为d的圆，这些圆都包括了u。<br> 那么存在这样一个u就表示这些圆都有交。若d&lt;L，直径端点的两个圆无交，若d=L，因为任意两个点的距离 ≤ 直径，因此任意两个点的圆都有交。所以L是d的最小值。<br> 点集直径很好求。当然可以建个虚树DP一下，不过这样就要排序，复杂度带log了。<br> 注意到一个事实：令dia(T)=(a,b)表示T的直径是a,b，那么<img src="https://uploadfiles.nowcoder.com/images/20181218/8030387_1545100930250_0D822F50E2F5AE4FCC9193EAD75FA2A2" alt="img"></p><h3 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  MySakure</span></span><br><span class="line"><span class="comment"> *    created: 25.09.2019 19:10:24      </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(int i=l;i&lt;=r;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,r,l) for(int i=r;i&gt;=l;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,dep[maxn],fa[maxn][<span class="number">33</span>],s,m,q[<span class="keyword">signed</span>(<span class="number">1e6</span>+<span class="number">10</span>)];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;g[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fat,<span class="keyword">int</span> deep)</span></span>&#123;</span><br><span class="line">    fa[u][<span class="number">0</span>]=fat;</span><br><span class="line">    dep[u]=deep;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">30</span>;++i)</span><br><span class="line">        fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">signed</span>(g[u].<span class="built_in">size</span>());++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=g[u][i];</span><br><span class="line">        <span class="keyword">if</span>(v==fat)<span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u,deep+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">30</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos&amp;(<span class="number">1</span>&lt;&lt;i))u=fa[u][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[a]&lt;dep[b])swap(a,b);</span><br><span class="line">    <span class="keyword">int</span> x=dep[a]-dep[b];</span><br><span class="line">    a=<span class="built_in">get</span>(a,x);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//务必判断</span></span><br><span class="line">    <span class="keyword">if</span>(a==b)<span class="keyword">return</span> a;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">29</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[a][i]==fa[b][i])<span class="keyword">continue</span>;</span><br><span class="line">        a=fa[a][i];</span><br><span class="line">        b=fa[b][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        g[a].push_back(b);</span><br><span class="line">        g[b].push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cerr&lt;&lt;"dfs start"&lt;&lt;endl;</span></span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//cerr&lt;&lt;"dfs end"&lt;&lt;endl;</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">        rep(i,<span class="number">1</span>,s)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;q[i];</span><br><span class="line">            <span class="keyword">if</span>(dep[x]&lt;dep[q[i]])x=q[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cerr&lt;&lt;"debug "&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=s;++i)&#123;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,dep[x]+dep[q[i]]<span class="number">-2</span>*dep[lca(x,q[i])]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(ans+<span class="number">1</span>)/<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/15/C来源：牛客网&quot;&gt;https://ac.nowcoder.com/acm/contest/15/C来源：牛客网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 时间限制：C/C++ 3秒，其他语言6秒&lt;br&gt; 空间限制：C/C++ 131072K，其他语言262144K&lt;br&gt;  64bit IO Format: %lld&lt;/p&gt;
    
    </summary>
    
    
      <category term="LCA" scheme="https://blog.mysakure.com/categories/LCA/"/>
    
    
      <category term="LCA" scheme="https://blog.mysakure.com/tags/LCA/"/>
    
  </entry>
  
</feed>
